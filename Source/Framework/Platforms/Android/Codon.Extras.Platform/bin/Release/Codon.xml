<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Codon</name>
    </assembly>
    <members>
        <member name="T:Codon.AssemblyConstants">
            <summary>
            This class contains various constants used throughout the solution
            and includes values that assist in decorating interfaces with 
            <see cref="T:Codon.InversionOfControl.DefaultTypeNameAttribute"/>.
            </summary>
        </member>
        <member name="T:Codon.AssertArg">
            <summary>
            Utility class for validating method arguments.
            </summary>
        </member>
        <member name="M:Codon.AssertArg.IsNotNull``1(``0,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to test.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs if the specified value 
            is <code>null</code>.</exception>
            <example>
            public UIElementAdapter(UIElement uiElement)
            {
            	this.uiElement = AssertArg.IsNotNull(uiElement, nameof(uiElement));	
            }
            </example>
        </member>
        <member name="M:Codon.AssertArg.IsNotNullOrEmpty(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value 
            is <code>null</code> or empty (a zero length string).
            </summary>
            <param name="value">The value to test.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs if the specified value 
            is <code>null</code> or empty (a zero length string).</exception>
            <example>
            public DoSomething(string message)
            {
            	this.message = AssertArg.IsNotNullOrEmpty(message, nameof(message));	
            }
            </example>
        </member>
        <member name="M:Codon.AssertArg.IsNotNullOrWhiteSpace(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value 
            is <code>null</code> or white space.
            </summary>
            <param name="value">The value to test.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified value 
            is <code>null</code> or consists of only white space.</exception>
        </member>
        <member name="M:Codon.AssertArg.IsNotEmpty(System.Guid,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is an empty guid.
            </summary>
            <param name="value">The value to test.</param>
            <param name="parameterName">The name of the member.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified value is an empty guid. 
            That is, if <c>value</c> equals <c>Guid.Empty</c>.</exception>
        </member>
        <member name="M:Codon.AssertArg.IsGreaterThan(System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is not greater 
            than the specified expected value.
            </summary>
            <param name="expected">
            The number which must be greater than the value.</param>
            <param name="value">The value to test.</param>
            <param name="parameterName">The name of the member.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified value is not greater 
            than the expected value.</exception>
        </member>
        <member name="M:Codon.AssertArg.IsGreaterThan(System.Double,System.Double,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is not greater 
            than the specified expected value.
            </summary>
            <param name="expected">
            The number which must be greater than the value.</param>
            <param name="value">The value to test.</param>
            <param name="parameterName">The name of the member.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified value is not greater 
            than the expected value.</exception>
        </member>
        <member name="M:Codon.AssertArg.IsGreaterThanOrEqual(System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is not greater 
            than or equal to the specified expected value.
            </summary>
            <param name="expected">
            The number which must be greater than or equal to the value.</param>
            <param name="value">The value to test.</param>
            <param name="parameterName">The name of the member.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified value is not greater 
            than or equal to the expected value.</exception>
        </member>
        <member name="M:Codon.AssertArg.IsGreaterThanOrEqual(System.Double,System.Double,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is not greater 
            than or equal to the specified expected value.
            </summary>
            <param name="expected">
            The number which must be greater than or equal to the value.</param>
            <param name="value">The value to test.</param>
            <param name="parameterName">The name of the member.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified value is not greater 
            than or equal to the expected value.</exception>
        </member>
        <member name="M:Codon.AssertArg.IsLessThan(System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is not less 
            than the specified expected value.
            </summary>
            <param name="expected">
            The number which must be less than the value.</param>
            <param name="value">The value to test.</param>
            <param name="parameterName">The name of the member.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified value is not less 
            than the expected value.</exception>
        </member>
        <member name="M:Codon.AssertArg.IsLessThan(System.Double,System.Double,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is not less 
            than the specified expected value.
            </summary>
            <param name="expected">
            The number which must be less than the value.</param>
            <param name="value">The value to test.</param>
            <param name="parameterName">The name of the member.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified value is not less 
            than the expected value.</exception>
        </member>
        <member name="M:Codon.AssertArg.IsLessThanOrEqual(System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is not less 
            than or equal to the specified expected value.
            </summary>
            <param name="expected">
            The number which must be less than or equal to the value.</param>
            <param name="value">The value to test.</param>
            <param name="parameterName">The name of the member.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified value is not less 
            than or equal to the expected value.</exception>
        </member>
        <member name="M:Codon.AssertArg.IsLessThanOrEqual(System.Double,System.Double,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is not less 
            than or equal to the specified expected value.
            </summary>
            <param name="expected">
            The number which must be less than or equal to the value.</param>
            <param name="value">The value to test.</param>
            <param name="parameterName">The name of the member.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The specified value.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified value is not less 
            than or equal to the expected value.</exception>
        </member>
        <member name="M:Codon.AssertArg.IsNotNullAndOfType``1(System.Object,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is <code>null</code> 
            or if the value is not of the specified type.
            </summary>
            <param name="value">The value to test.</param> 
            <param name="parameterName">The name of the parameter.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The value to test.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified value is <code>null</code> 
            or of a type not assignable from the specified type.</exception>
            <example>
            public DoSomething(object message)
            {
            	this.message = AssertArg.IsNotNullAndOfType&lt;string&gt;(message, nameof(message));	
            }
            </example>
        </member>
        <member name="M:Codon.AssertArg.IsOfType``1(System.Object,System.String,System.String,System.String,System.Int32)">
            <summary>
            Throws an exception if the specified value is not of the type 
            denoted by the type parameter <c>T</c>.
            </summary>
            <typeparam name="T">The expected type of the value.</typeparam>
            <param name="value">
            The parameter value passed to the calling method.</param>
            <param name="parameterName">
            The name of the parameter from the calling method.</param>
            <param name="memberName">Compiler populated parameter
            that provides the caller member name.</param>
            <param name="filePath">Compiler populated parameter
            that provides the file path to the caller.</param>
            <param name="lineNumber">
            Compiler populated parameter that provides 
            the line number of where the method was called.</param>
            <returns>The value passed to the method.</returns>
            <exception cref="T:System.ArgumentException">
            If the specified value is not of the type
            denoted by the type parameter <c>T</c>.</exception>
        </member>
        <member name="T:Codon.Collections.ComparerExtensions">
            <summary>
            Comparison related extension methods for collection types.
            </summary>
        </member>
        <member name="M:Codon.Collections.ComparerExtensions.IsEqualDictionary(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Compares the objects in one dictionary with another.
            </summary>
            <param name="dictionary1">
            The dictionary that is compared with dictionary2.</param>
            <param name="dictionary2">
            The dictionary that is compared with dictionary1.</param>
            <returns><c>true</c> if the collections 
            have the same set of keys and values.</returns>
        </member>
        <member name="M:Codon.Collections.ComparerExtensions.IsEqualList(System.Collections.IList,System.Collections.IList)">
            <summary>
            Compares two lists for equivalence.
            Objects in both lists must be the same
            and in the same position.
            </summary>
            <param name="list1">The first list to compare.
            Can not be null.</param>
            <param name="list2">The second list to compare.
            Can be null.</param>
            <returns><c>true</c> if the collections 
            are equal; <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            Raised if <c>list1</c> is <c>null</c>.</exception>
        </member>
        <member name="T:Codon.Collections.CollectionComparer">
            <summary>
            This class is used to compare multiple collections
            for equality. It is used to iterate over collections
            comparing individual items within the collections.
            </summary>
        </member>
        <member name="M:Codon.Collections.CollectionComparer.AreEqualDictionariesGeneric``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Compares the objects in one dictionary with another.
            </summary>
            <param name="dictionary1">
            The dictionary that is compared with dictionary2.</param>
            <param name="dictionary2">
            The dictionary that is compared with dictionary1.</param>
            <returns><c>true</c> if the collections 
            have the same set of keys and values.</returns>
        </member>
        <member name="M:Codon.Collections.CollectionComparer.AreEqualDictionaries(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Compares the objects in one dictionary with another.
            </summary>
            <param name="dictionary1">
            The dictionary that is compared with dictionary2.</param>
            <param name="dictionary2">
            The dictionary that is compared with dictionary1.</param>
            <returns><c>true</c> if the collections 
            have the same set of keys and values.</returns>
        </member>
        <member name="M:Codon.Collections.CollectionComparer.HaveSameElements``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Compares two collections for equivalence while
            ignoring the order of items.
            </summary>
            <typeparam name="TValue">The generic type of 
            both collections.</typeparam>
            <param name="collection1"></param>
            <param name="collection2"></param>
            <returns><c>true</c> if the collections
            contain the same elements; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Codon.Collections.CollectionComparer.AreEqualLists(System.Collections.IList,System.Collections.IList)">
            <summary>
            Compares two lists for equivalence.
            Objects in both lists must be the same
            and in the same position.
            </summary>
            <param name="list1">The first list to compare.
            Can be null.</param>
            <param name="list2">The second list to compare.
            Can be null.</param>
            <returns><c>true</c> if the collections 
            are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Codon.ComponentModel.IExceptionHandler">
            <summary>
            Interface specifying the functionality to be implemented 
            by an object that wishes to manage the handling of exceptions.
            </summary>
        </member>
        <member name="M:Codon.ComponentModel.IExceptionHandler.ShouldRethrowException(System.Exception,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Determines if an exception should be re-thrown
            or can be safely ignored.
            </summary>
            <param name="exception">
            The exception that was unhandled.</param>
            <param name="owner">
            The object directly associated with the exception.</param>
            <param name="memberName">
            The class member name of the call origin.
            Automatically populated by the compiler.</param>
            <param name="filePath">
            The file path of the call origin.
            Automatically populated by the compiler.</param>
            <param name="lineNumber">
            The line number of the call origin.
            Automatically populated by the compiler.</param>
            <returns><c>true</c> if the exception should be rethrown;
            <c>false</c> if it has been handled.</returns>
        </member>
        <member name="T:Codon.ComponentModel.ExceptionHandlers.LoggingExceptionHandler">
            <summary>
            The default implementation of <see cref="T:Codon.ComponentModel.IExceptionHandler"/>.
            This class does not handle exceptions, but merely logs
            them and instructs the caller to rethrow them.
            </summary>
        </member>
        <member name="T:Codon.ComponentModel.IProvider`1">
            <summary>
            A class implementing this interface
            is able to resolve an object of the specified type.
            </summary>
            <typeparam name="T">The type of the provided item.</typeparam>
        </member>
        <member name="P:Codon.ComponentModel.IProvider`1.ProvidedItem">
            <summary>
            The item that is provided.
            </summary>
        </member>
        <member name="T:Codon.ComponentModel.ISuspendChangeNotification">
            <summary>
            If a class implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            then implementing this interface allows change events
            to be switched off.
            </summary>
        </member>
        <member name="P:Codon.ComponentModel.ISuspendChangeNotification.ChangeNotificationSuspended">
            <summary>
            Gets or sets a value indicating if change events
            should be raised.
            </summary>
        </member>
        <member name="T:Codon.ComponentModel.ObservableBase">
            <summary>
            A base class for property change notification.
            Automatically raises <c>PropertyChanged</c>
            and <c>PropertyChanging</c> events when using
            its <see cref="M:Codon.ComponentModel.ObservableBase.Set``2(``1@,``1)"/> methods.
            <seealso cref="T:Codon.ComponentModel.PropertyChangeNotifier"/>.
            </summary>
        </member>
        <member name="P:Codon.ComponentModel.ObservableBase.PropertyChangeNotifier">
            <summary>
            Gets the notifier. It is lazy loaded.
            </summary>
            <value>The notifier.</value>
        </member>
        <member name="M:Codon.ComponentModel.ObservableBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Codon.ComponentModel.ObservableBase.Set``2(``1@,``1)">
            <summary> 
            Assigns the specified newValue to the specified property
            and then notifies listeners that the property has changed.
            Assignment nor notification will occur if the specified
            property and newValue are equal. 
            Use this method when a downcast is required.
            </summary>
            <typeparam name="TProperty">
            The type of the property.</typeparam>
            <typeparam name="TField">The type of the field. 
            When assignment occurs, a downcast is applied.</typeparam>
            <param name="field">
            A reference to the property that is to be assigned.
            </param>
            <param name="newValue">
            The value to assign the property.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified propertyName is <code>null</code>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs if the specified propertyName is an empty string.
            </exception>
        </member>
        <member name="M:Codon.ComponentModel.ObservableBase.Set``1(System.String,``0@,``0)">
            <summary>
            Assigns the specified newValue to the specified property
            and then notifies listeners that the property has changed.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyName">Name of the property. 
            Can not be null.</param>
            <param name="field">
            A reference to the property that is to be assigned.</param>
            <param name="newValue">
            The value to assign the property.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified propertyName is <code>null</code>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs if the specified propertyName is an empty string.
            </exception>
        </member>
        <member name="M:Codon.ComponentModel.ObservableBase.Set``1(``0@,``0,System.String)">
            <summary>
            Assigns the specified newValue to the specified property
            and then notifies listeners that the property has changed.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="propertyName">Name of the property. 
            Can not be null.</param>
            <param name="property">
            A reference to the property that is to be assigned.</param>
            <param name="newValue">
            The value to assign the property.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified propertyName is <code>null</code>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs if the specified propertyName is an empty string.
            </exception>
        </member>
        <member name="M:Codon.ComponentModel.ObservableBase.Set``1(System.String,System.WeakReference@,``0)">
            <summary>
            Assigns the specified newValue to the specified 
            WeakReference field ref and then notifies listeners 
            that the property has changed.
            Assignment nor notification will occur if the specified
            property and newValue are equal. 
            Uses an <see cref="T:System.Linq.Expressions.Expression"/> 
            to determine the property name, 
            which is slower than using the string property name overload.
            </summary>
            <typeparam name="TProperty">
            The type of the property.</typeparam>
            <param name="propertyName">
            The name of the property being changed.</param>
            <param name="fieldReference">
            A reference to the field <see cref="T:System.WeakReference"/> 
            that is to be assigned.</param>
            <param name="newValue">
            The value to assign the property.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified propertyName is <code>null</code>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs if the specified propertyName is an empty string.
            </exception>
        </member>
        <member name="M:Codon.ComponentModel.ObservableBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance 
            of the <see cref="T:Codon.ComponentModel.ObservableBase"/> class.
            </summary>
            <param name="useExtendedEventArgs">if set to <c>true</c> 
            the PropertyChangeNotifier will use extended event args.
            Default is <c>true</c>.</param>
        </member>
        <member name="E:Codon.ComponentModel.ObservableBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            <seealso cref="T:Codon.ComponentModel.PropertyChangeNotifier"/>
            </summary>
        </member>
        <member name="E:Codon.ComponentModel.ObservableBase.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            <seealso cref="T:Codon.ComponentModel.PropertyChangeNotifier"/>
            </summary>
        </member>
        <member name="T:Codon.ComponentModel.AssignmentResult">
            <summary>
            Indicates the result of a property value assignment.
            <see cref="M:Codon.ComponentModel.PropertyChangeNotifier.Set``2(``1@,``1,System.String)"/>.
            </summary>
        </member>
        <member name="F:Codon.ComponentModel.AssignmentResult.Success">
            <summary>
            The assignment succeeded and the value changed.
            </summary>
        </member>
        <member name="F:Codon.ComponentModel.AssignmentResult.Cancelled">
            <summary>
            A <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> 
            event subscriber cancelled the update.
            </summary>
        </member>
        <member name="F:Codon.ComponentModel.AssignmentResult.AlreadyAssigned">
            <summary>
            The property value is already equal to the specified value.
            No change was made.
            </summary>
        </member>
        <member name="F:Codon.ComponentModel.AssignmentResult.OwnerDisposed">
            <summary>
            The owner object associated with the 
            <see cref="T:Codon.ComponentModel.PropertyChangeNotifier"/> was disposed.
            No further change events can be raised.
            </summary>
        </member>
        <member name="T:Codon.ComponentModel.IPropertyChangedEventArgs">
            <summary>
            <c>PropertyChangedEventArgs</c> is implemented differently
            on different platforms. This interface serves to abstract
            the implementation.
            </summary>
        </member>
        <member name="P:Codon.ComponentModel.IPropertyChangedEventArgs.PropertyName">
            <summary>
            The name of the property that changed.
            </summary>
        </member>
        <member name="P:Codon.ComponentModel.IPropertyChangedEventArgs.OldValue">
            <summary>
            The value before the change.
            </summary>
        </member>
        <member name="P:Codon.ComponentModel.IPropertyChangedEventArgs.NewValue">
            <summary>
            The value after the change occurred.
            </summary>
        </member>
        <member name="T:Codon.ComponentModel.PropertyChangedEventArgs`1">
            <summary>
            Provides data for the 
            <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event,
            exposed via the <see cref="T:Codon.ComponentModel.PropertyChangeNotifier"/>.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="P:Codon.ComponentModel.PropertyChangedEventArgs`1.OldValue">
            <summary>
            Gets the value of the property before it was changed.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:Codon.ComponentModel.PropertyChangedEventArgs`1.NewValue">
            <summary>
            Gets the new value of the property after it was changed.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangedEventArgs`1.#ctor(System.String,`0,`0)">
            <summary>
            Initializes a new instance 
            of the <see cref="T:Codon.ComponentModel.PropertyChangedEventArgs`1"/> class.
            </summary>
            <param name="propertyName">Name of the property that changed.</param>
            <param name="oldValue">The old value before the change occurred.</param>
            <param name="newValue">The new value after the change occurred.</param>
        </member>
        <member name="T:Codon.ComponentModel.PropertyChangeNotifier">
            <summary>
            This class provides an implementation of the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> interfaces. 
            Extended <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> and <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/>
            are used to provides the old value and new value for the property. 
            <seealso cref="T:Codon.ComponentModel.PropertyChangedEventArgs`1"/>
            <seealso cref="T:Codon.ComponentModel.PropertyChangingEventArgs`1"/>
            </summary>
        </member>
        <member name="P:Codon.ComponentModel.PropertyChangeNotifier.Owner">
            <summary>
            Gets the owner for testing purposes.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangeNotifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance 
            of the <see cref="T:Codon.ComponentModel.PropertyChangeNotifier"/> class.
            </summary>
            <param name="owner">The intended sender 
            of the <code>PropertyChanged</code> event.</param>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangeNotifier.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance 
            of the <see cref="T:Codon.ComponentModel.PropertyChangeNotifier"/> class.
            </summary>
            <param name="owner">The intended sender 
            <param name="useExtendedEventArgs">If <c>true</c> the
            generic <see cref="T:Codon.ComponentModel.PropertyChangedEventArgs`1"/>
            and <see cref="T:Codon.ComponentModel.PropertyChangingEventArgs`1"/> 
            are used when raising events. 
            Otherwise, the non-generic types are used, and they are cached 
            to decrease heap fragmentation.</param>
            of the <code>PropertyChanged</code> event.</param>
            <param name="useExtendedEventArgs">If <c>true</c> an instance of
            <c>IPropertyChangedEventArgs</c> will accompany the raising of this event,
            which include the old and new values.</param>
        </member>
        <member name="E:Codon.ComponentModel.PropertyChangeNotifier.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Codon.ComponentModel.PropertyChangeNotifier.MaintainThreadAffinity">
            <summary>
            Gets or sets a value indicating whether events will be raised 
            on the thread of subscription (either the UI or ViewModel layer).
            <c>true</c> by default.
            </summary>
            <value>
            	<c>true</c> if raising events on the thread 
            of subscription; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangeNotifier.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            If the owner has been GC'd then the event will not be raised.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangeNotifier.Set``1(System.String,``0@,``0)">
            <summary>
            Assigns the specified newValue to the specified property
            and then notifies listeners that the property has changed.
            </summary>
            <typeparam name="TField">The type of the backing field.</typeparam>
            <param name="propertyName">Name of the property. Can not be null.</param>
            <param name="property">A reference to the property that is to be assigned.</param>
            <param name="newValue">The value to assign the property.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified propertyName is <code>null</code>.</exception>
            <exception cref="T:System.ArgumentException">
            Occurs if the specified propertyName is an empty string.</exception>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangeNotifier.Set``1(``0@,``0,System.String)">
            <summary>
            Assigns the specified newValue to the specified property
            and then notifies listeners that the property has changed.
            Note: This is new for WP8.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="propertyName">Name of the property. Can not be null.</param>
            <param name="field">A reference to the property that is to be assigned.</param>
            <param name="newValue">The value to assign the property.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified propertyName is <code>null</code>.</exception>
            <exception cref="T:System.ArgumentException">
            Occurs if the specified propertyName is an empty string.</exception>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangeNotifier.Set``2(``1@,``1,System.String)">
            <summary> 
            Assigns the specified newValue to the specified property
            and then notifies listeners that the property has changed.
            Assignment nor notification will occur if the specified
            property and newValue are equal. 
            Use this method when a downcast is required.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TField">The type of the field. 
            When assignment occurs, a downcast is applied.</typeparam>
            <param name="field">A reference to the property that is to be assigned.</param>
            <param name="newValue">The value to assign the property.</param>
            <param name="propertyName">The caller member name.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified propertyName is <code>null</code>.</exception>
            <exception cref="T:System.ArgumentException">
            Occurs if the specified propertyName is an empty string.</exception>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangeNotifier.Set``1(System.String,System.WeakReference@,``0)">
            <summary>
            Assigns the specified newValue to the specified WeakReference field ref
            and then notifies listeners that the property has changed.
            Assignment nor notification will occur if the specified
            property and newValue are equal. 
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyName">The name of the property being changed.</param>
            <param name="property">A reference to the property 
            that is to be assigned.</param>
            <param name="newValue">The value to assign the property.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified propertyName is <code>null</code>.</exception>
            <exception cref="T:System.ArgumentException">
            Occurs if the specified propertyName is an empty string.</exception>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangeNotifier.NotifyChanged``1(System.String,``0,``0)">
            <summary>
            Notifies listeners that the specified property has changed.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyName">Name of the property. Can not be null.</param>
            <param name="oldValue">The old value before the change occurred.</param>
            <param name="newValue">The new value after the change occurred.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified propertyName is <code>null</code>.</exception>
            <exception cref="T:System.ArgumentException">
            Occurs if the specified propertyName is an empty string.</exception>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangeNotifier.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanging"/> event.
            If the owner has been GC'd then the event will not be raised.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="T:Codon.ComponentModel.IPropertyChangingEventArgs">
            <summary>
            <c>PropertyChangingEventArgs</c> is implemented differently
            on different platforms. This interface serves to abstract
            the implementation.
            </summary>
        </member>
        <member name="M:Codon.ComponentModel.IPropertyChangingEventArgs.Cancel">
            <summary>
            Cancels the update so that no change is made
            and the value remains the same.
            </summary>
        </member>
        <member name="T:Codon.ComponentModel.PropertyChangingEventArgs`1">
            <summary>
            Provides data for the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> event,
            exposed via the <see cref="T:Codon.ComponentModel.PropertyChangeNotifier"/>.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="P:Codon.ComponentModel.PropertyChangingEventArgs`1.OldValue">
            <summary>
            Gets the value of the property before it was changed.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:Codon.ComponentModel.PropertyChangingEventArgs`1.NewValue">
            <summary>
            Gets the new value of the property after it was changed.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:Codon.ComponentModel.PropertyChangingEventArgs`1.Cancelled">
            <summary>
            Gets or sets a value indicating whether 
            this <see cref="T:Codon.ComponentModel.PropertyChangingEventArgs`1"/> has been cancelled.
            </summary>
            <value><c>true</c> if cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangingEventArgs`1.Cancel">
            <summary>
            Cancels this instance so that the change will not occur.
            </summary>
        </member>
        <member name="M:Codon.ComponentModel.PropertyChangingEventArgs`1.#ctor(System.String,`0,`0)">
            <summary>
            Initializes a new instance 
            of the <see cref="T:Codon.ComponentModel.PropertyChangedEventArgs`1"/> class.
            </summary>
            <param name="propertyName">Name of the property that changed.</param>
            <param name="oldValue">The old value before the change occurred.</param>
            <param name="newValue">The new value after the change occurred.</param>
        </member>
        <member name="T:Codon.ComponentModel.DefaultImplicitTypeConverter">
            <summary>
            Default implementation of the <see cref="T:Codon.ComponentModel.IImplicitTypeConverter"/>
            interface. This is a simplified version 
            of the WPF and Mono ImplicitTypeConverter. 
            The WPF and Mono version makes use 
            of the FCL's TypeConverter APIs, which are not present 
            in .NET Standard.
            </summary>
        </member>
        <member name="T:Codon.ComponentModel.FromStringConverter">
            <summary>
            This class is able to convert a string
            to various built-in types.
            </summary>
        </member>
        <member name="T:Codon.ComponentModel.DelegateConverter">
            <summary>
            This class provides a Func based implementation
            of the <see cref="T:Codon.ComponentModel.IConverter"/> interface.
            </summary>
        </member>
        <member name="T:Codon.ComponentModel.IConverter`2">
            <summary>
            Converts a value of type <c>TFrom</c> 
            to a value of type <c>TTo</c>.
            </summary>
            <typeparam name="TFrom">The type converted from.</typeparam>
            <typeparam name="TTo">The type converted to.</typeparam>
        </member>
        <member name="T:Codon.ComponentModel.IConverter">
            <summary>
            Simple implementation of <c>IConverter</c>, using the object type.
            </summary>
        </member>
        <member name="T:Codon.ComponentModel.IImplicitTypeConverter">
            <summary>
            A class implementing this interface is designed to convert
            an object to another object of a specified type.
            </summary>
        </member>
        <member name="M:Codon.ComponentModel.IImplicitTypeConverter.ConvertToType(System.Object,System.Type)">
            <summary>
            Attempts to convert an object to the specified type.
            </summary>
            <param name="value">The value that requires conversion.</param>
            <param name="type">The type of object 
            to change the object to.</param>
            <returns>The converted object, or <c>null</c>.</returns>
        </member>
        <member name="T:Codon.Concurrency.ConcurrencyException">
            <summary>
            The exception that is thrown when a thread violates
            a concurrency constraint, such as causing 
            a prohibited cross-thread operation.
            </summary>
        </member>
        <member name="T:Codon.Concurrency.DelegateReference">
            <summary>
            Allows a <see cref="P:Codon.Concurrency.DelegateReference.Delegate"/> to be referenced directly
            or using a <see cref="T:System.WeakReference"/>.
            </summary>
        </member>
        <member name="M:Codon.Concurrency.DelegateReference.#ctor(System.Delegate,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Codon.Concurrency.DelegateReference"/> class.
            </summary>
            <param name="delegateToReference">The target delegate.</param>
            <param name="useWeakReference">
            if set to <c>true</c> a weak reference 
            will be used for the target of the <see cref="P:Codon.Concurrency.DelegateReference.Delegate"/>.
            </param>
        </member>
        <member name="T:Codon.Concurrency.ISynchronizationContext">
            <summary>
            Used to allow calls to be marshaled 
            to a particular thread.
            <seealso cref="T:System.Threading.SynchronizationContext"/>
            </summary>
        </member>
        <member name="M:Codon.Concurrency.ISynchronizationContext.Post(System.Action,System.String,System.String,System.Int32)">
            <summary>
            Invokes the specified callback asynchronously.
            Method returns immediately upon queuing the request.
            </summary>
            <param name="action">The delegate to invoke.</param>
            <param name="memberName">The caller member name, 
            which indicates the property or method location of the method call.</param>
            <param name="filePath">The caller file path, 
            which indicates the file path location of the method call.</param>
            <param name="lineNumber">The caller line number, 
            which indicates the line number of the method call.</param>
        </member>
        <member name="M:Codon.Concurrency.ISynchronizationContext.PostAsync(System.Action,System.String,System.String,System.Int32)">
            <summary>
            Invokes the specified callback asynchronously.
            Method blocks until the specified callback completes.
            </summary>
            <param name="action">The delegate to invoke.</param>
            <param name="memberName">The caller member name, 
            which indicates the property or method location of the method call. 
            This parameter is optional and in most cases should not be supplied.</param>
            <param name="filePath">The caller file path, 
            which indicates the file path location of the method call.
            This parameter is optional and in most cases should not be supplied.</param>
            <param name="lineNumber">The caller line number, 
            which indicates the line number of the method call.
            This parameter is optional and in most cases should not be supplied.</param>
        </member>
        <member name="M:Codon.Concurrency.ISynchronizationContext.Send(System.Action,System.String,System.String,System.Int32)">
            <summary>
            If the calling thread is matches the thread used by the synchronization context
            then the action is invoked on the calling thread; if not, the action is invoked 
            on the synchronization context thread.
            </summary>
            <param name="action"></param>
            <param name="memberName">The caller member name, 
            which indicates the property or method location of the method call. 
            This parameter is optional and in most cases should not be supplied.</param>
            <param name="filePath">The caller file path, 
            which indicates the file path location of the method call.
            This parameter is optional and in most cases should not be supplied.</param>
            <param name="lineNumber">The caller line number, 
            which indicates the line number of the method call.
            This parameter is optional and in most cases should not be supplied.</param>
        </member>
        <member name="M:Codon.Concurrency.ISynchronizationContext.SendAsync(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.Int32)">
            <summary>
            Invokes the specified callback asynchronously.
            Method blocks until the specified callback completes.
            </summary>
            <param name="action">The delegate to invoke.</param>
            <param name="memberName">The caller member name, 
            which indicates the property or method location of the method call. 
            This parameter is optional and in most cases should not be supplied.</param>
            <param name="filePath">The caller file path, 
            which indicates the file path location of the method call.
            This parameter is optional and in most cases should not be supplied.</param>
            <param name="lineNumber">The caller line number, 
            which indicates the line number of the method call.
            This parameter is optional and in most cases should not be supplied.</param>
        </member>
        <member name="P:Codon.Concurrency.ISynchronizationContext.InvokeRequired">
            <summary>
            Gets a value indicating whether invocation is required.
            That is, it determines whether the call was made from a thread other 
            than the one that the current instance was created on.
            </summary>
            <value><c>true</c> if the calling thread was not the thread that the current instance 
            was initialized on; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Codon.Concurrency.ISynchronizationContext.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:Codon.Concurrency.ISynchronizationContext.InitializeRequired">
            <summary>
            Indicates whether the initialize method needs 
            to be called on the main thread before use.
            </summary>
        </member>
        <member name="T:Codon.Concurrency.SynchronizationContextExtensions">
            <summary>
            Extension methods for objects implementing
            <see cref="T:Codon.Concurrency.ISynchronizationContext"/>.
            </summary>
        </member>
        <member name="M:Codon.Concurrency.SynchronizationContextExtensions.PostWithDeferralAsync(Codon.Concurrency.ISynchronizationContext,System.Action,System.UInt32,System.String,System.String,System.Int32)">
            <summary>
            Invokes the specified callback asynchronously.
            Method returns immediately upon queuing the request.
            </summary>
            <param name="context"></param>
            <param name="deferralDepth">This optional parameter invokes 
            the action after deferralDepth passes of the context.
            For example, a deferralDepth of 2 sees the action is invoked 
            only after two passes by the context.
            A value of 0 behaves the same as BeginInvoke and is placed directly 
            on the context queue and invoked immediately.</param>
            <param name="action">The delegate to invoke.</param>
            <param name="memberName"></param>
            <param name="filePath"></param>
            <param name="lineNumber"></param>
        </member>
        <member name="M:Codon.Concurrency.SynchronizationContextExtensions.PostWithDelayAsync(Codon.Concurrency.ISynchronizationContext,System.Action,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Invokes the specified action after the specified delay in milliseconds.
            Note: Be sure to wrap the action code in a try catch, 
            as exceptions raised by the action are not handled.
            </summary>
            <param name="context">
            The context on which the action will be invoked.</param>
            <param name="action">
            The action to execute once the delay expires.</param>
            <param name="delayMs">
            The time, in milleseconds, to wait before executing the action.</param>
        </member>
        <member name="T:Codon.Concurrency.UISynchronizationContext">
            <summary>
            The default implementation of the 
            <see cref="T:Codon.Concurrency.ISynchronizationContext"/> interface. 
            See the interface for API documentation.
            </summary>
        </member>
        <member name="P:Codon.Concurrency.UISynchronizationContext.ExceptionHandler">
            <summary>
            When an exception occurs during execution or during evaluating 
            if the command can execute, then the exception is passed to the exception manager.
            If <c>null</c> the IoC container is used to locate an instance.
            </summary>
        </member>
        <member name="T:Codon.Concurrency.TaskUtility">
            <summary>
            This class provides utility methods 
            related to the <see cref="T:System.Threading.Tasks.Task"/> class.
            </summary>
        </member>
        <member name="M:Codon.Concurrency.TaskUtility.Yield(System.UInt32)">
            <summary>
            Awaits <see cref="M:System.Threading.Tasks.Task.Yield"/>
            for the specified number of times.
            </summary>
            <param name="yieldCount">
            The number of times to yield.</param>
        </member>
        <member name="M:Codon.Concurrency.TaskUtility.CreateTaskFromException``1(System.Exception)">
            <summary>
            This method provides a quick way to create
            a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>
            and set its Exception to the specified exception.
            </summary>
            <param name="exception">
            The exception to report was raised by the task.</param>
            <returns>A task with its Exception set 
            to the specified exception.</returns>
        </member>
        <member name="M:Codon.Concurrency.TaskUtility.CreateTaskFromException(System.Exception)">
            <summary>
            This method provides a quick way to create
            a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>
            and set its Exception to the specified exception.
            </summary>
            <param name="exception">
            The exception to report was raised by the task.</param>
            <returns>A task with its Exception set 
            to the specified exception.</returns>
        </member>
        <member name="T:Codon.UIContext">
            <summary>
            This class is not intended for public consumption.
            It is public because of code signing and constraints
            caused by the Xamarin platforms lack of code signing.
            This class provides convenient access to the registered
            <see cref="T:Codon.Concurrency.ISynchronizationContext"/>.
            </summary>
        </member>
        <member name="T:Codon.DialogModel.DialogController">
            <summary>
            This class is used primarily to close a dialog
            from calling code when using one of the Show*
            methods of the <see cref="T:Codon.Services.IDialogService" />.
            </summary>
        </member>
        <member name="E:Codon.DialogModel.DialogController.CloseRequested">
            <summary>
            This event is not intended for user code.
            This event is used by the 
            <see cref="T:Codon.Services.IDialogService" />
            implementation to close the dialog 
            when the <see cref="M:Codon.DialogModel.DialogController.Close(System.EventArgs)"/> method is called.
            </summary>
        </member>
        <member name="M:Codon.DialogModel.DialogController.Close(System.EventArgs)">
            <summary>
            Call this method to dismiss the dialog.
            The <see cref="T:Codon.Services.IDialogService" />
            implementation dismisses the dialog immediately.
            </summary>
            <param name="e">An optional event args object,
            which may be used to convey information to the 
            <see cref="T:Codon.Services.IDialogService" /> implementation</param>
        </member>
        <member name="P:Codon.DialogModel.DialogController.Cancellable">
            <summary>
            If <c>true</c> the dialog is able to be dismissed 
            by the user. If <c>false</c> the dialog must be actioned
            using one of its buttons.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.DialogController.DialogStyles">
            <summary>
            Indicates how the dialog should be displayed.
            At present this affects the Android implementation
            of the <see cref="T:Codon.Services.IDialogService" />.
            </summary>
        </member>
        <member name="T:Codon.DialogModel.YesNoCancelQuestionResult">
            <summary>
            The result from a user when prompted with a question 
            that has three options: Yes, No, and Cancel.
            </summary>
        </member>
        <member name="F:Codon.DialogModel.YesNoCancelQuestionResult.Yes">
            <summary>
            The user selected 'yes.'
            </summary>
        </member>
        <member name="F:Codon.DialogModel.YesNoCancelQuestionResult.No">
            <summary>
            The user selected 'no.'
            </summary>
        </member>
        <member name="F:Codon.DialogModel.YesNoCancelQuestionResult.Cancel">
            <summary>
            The user selected 'cancel.'
            </summary>
        </member>
        <member name="T:Codon.DialogModel.OkCancelQuestionResult">
            <summary>
            The result from a user when prompted with a question 
            that has two options: Ok and Cancel.
            </summary>
        </member>
        <member name="F:Codon.DialogModel.OkCancelQuestionResult.OK">
            <summary>
            The user selected 'OK.'
            </summary>
        </member>
        <member name="F:Codon.DialogModel.OkCancelQuestionResult.Cancel">
            <summary>
            The user selected 'Cancel.'
            </summary>
        </member>
        <member name="T:Codon.DialogModel.DialogServiceBase">
            <summary>
            Base implementation of <see cref="T:Codon.Services.IDialogService"/>.
            </summary>
        </member>
        <member name="M:Codon.DialogModel.DialogServiceBase.ShowDialogAsync(System.Object,System.String,Codon.DialogModel.DialogButton,Codon.DialogModel.DialogImage,Codon.DialogModel.DialogController)">
            <summary>
            Shows a dialogue using a known set of buttons and images. 
            Override this message in test mocks.
            This is the only place where a MessageBox is shown.
            </summary>
            <param name="content">The message text to display.</param>
            <param name="caption">The caption to display at the top of the dialog.</param>
            <param name="dialogButton">The message box button enum value, 
            which determines what buttons are shown.</param>
            <param name="dialogImage">The message box image, 
            which determines what icon is used.</param>
            <param name="dialogController">An instance of the DialogController class 
            that can be used to dismiss the dialog from calling code.</param>
            <returns>The result of showing the message box.</returns>
        </member>
        <member name="T:Codon.DialogModel.DialogStyles">
            <summary>
            Indicates how a dialog should be displayed.
            </summary>
        </member>
        <member name="F:Codon.DialogModel.DialogStyles.StretchHorizontal">
            <summary>
            Make the dialog stretch to encompass the available
            screen width.
            </summary>
        </member>
        <member name="F:Codon.DialogModel.DialogStyles.StretchVertical">
            <summary>
            Make the dialog stretch to encompass the available
            screen height.
            </summary>
        </member>
        <member name="T:Codon.DialogModel.IQuestion`1">
            <summary>
            A placeholder code contract for a question
            posed to a user via the <see cref="T:Codon.Services.IDialogService"/>
            implementation.
            </summary>
            <typeparam name="TResponse">
            An object containing information relevant to displaying
            the question to the user, for example <seealso cref="T:Codon.DialogModel.TextResponse"/>.
            </typeparam>
        </member>
        <member name="T:Codon.DialogModel.MockDialogService">
            <summary>
            A simple implementation of IDialogService
            that is used during unit testing.
            </summary>
        </member>
        <member name="T:Codon.DialogModel.QuestionResponse`1">
            <summary>
            Represents a user response for a question asked via the
            <see cref="T:Codon.Services.IDialogService"/>.
            </summary>
            <typeparam name="TResponse">
            The type of object that is specific to the question,
            such as a <seealso cref="T:Codon.DialogModel.TextResponse"/>.</typeparam>
        </member>
        <member name="P:Codon.DialogModel.QuestionResponse`1.Question">
            <summary>
            The question asked. This property is intended to be used 
            to match up the response with the original question.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.QuestionResponse`1.Response">
            <summary>
            The response provided by the user.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.QuestionResponse`1.Error">
            <summary>
            If an error occurs while asking the question
            it is assigned to this property.
            </summary>
        </member>
        <member name="M:Codon.DialogModel.QuestionResponse`1.#ctor(`0,Codon.DialogModel.IQuestion{`0},System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="result">The user response.</param>
            <param name="question">The original question.</param>
            <param name="error">
            If an error occurs while asking the question
            it is passed to the constructor.</param>
        </member>
        <member name="T:Codon.DialogModel.TextQuestion">
            <summary>
            Represents a question that requires a text
            response from the user.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.TextQuestion.Question">
            <summary>
            The body text of the question.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.TextQuestion.InputScope">
            <summary>
            The type of software keyboard to display.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.TextQuestion.Caption">
            <summary>
            The caption displayed in the dialog.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.TextQuestion.ValidationExpression">
            <summary>
            A regular expression that is used to validate 
            the user's response.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.TextQuestion.ValidationFailedMessage">
            <summary>
            The message to display to the user if the value
            does not validate. <seealso cref="P:Codon.DialogModel.TextQuestion.ValidationExpression"/>
            </summary>
        </member>
        <member name="P:Codon.DialogModel.TextQuestion.DefaultResponse">
            <summary>
            Text that is automatically populated in the text box.
            </summary>
        </member>
        <member name="M:Codon.DialogModel.TextQuestion.#ctor(System.String,Codon.MissingTypes.System.Windows.Input.InputScopeNameValue)">
            <summary>
            </summary>
            <param name="question">The text of the question.</param>
            <param name="inputScope">
            The type of software keyboard to display (if applicable).
            </param>
        </member>
        <member name="T:Codon.DialogModel.TextResponse">
            <summary>
            Represents a user response to a question. 
            <seealso cref="T:Codon.DialogModel.TextQuestion"/>
            </summary>
        </member>
        <member name="P:Codon.DialogModel.TextResponse.Text">
            <summary>
            The user's text response.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.TextResponse.OkCancelQuestionResult">
            <summary>
            Indicates whether the text was submitted,
            or the dialog cancelled.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.TextResponse.HasValidAnswer">
            <summary>
            A utility property that checks if the user
            provided a text response and didn't dismiss 
            the dialog.
            </summary>
        </member>
        <member name="T:Codon.DialogModel.ToastVerticalOrientation">
            <summary>
            Defines the vertical orientation or location
            of a toast message, as displayed by the 
            <seealso cref="T:Codon.Services.IDialogService"/> implementation.
            </summary>
        </member>
        <member name="T:Codon.DialogModel.ToastAnimationType">
            <summary>
            Defines the animation of a toast message, 
            as displayed by the 
            <seealso cref="T:Codon.Services.IDialogService"/> implementation.
            </summary>
        </member>
        <member name="T:Codon.DialogModel.ToastParameters">
            <summary>
            Used by the <see cref="T:Codon.Services.IDialogService"/>
            implementation to define the behaviour of a toast 
            message.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.ToastParameters.Caption">
            <summary>
            The larger text area of the toast.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.ToastParameters.Body">
            <summary>
            A smaller text area than the <c>Caption</c>
            containing a potentially longer string.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.ToastParameters.ImageUri">
            <summary>
            An image to display in the toast.
            Note that this may not be supported on all platforms.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.ToastParameters.MillisecondsUntilHidden">
            <summary>
            The duration that the toast remains visible.
            This property may not be fully supported on all platforms.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.ToastParameters.ImageWidth">
            <summary>
            The width of the image to display in the toast.
            This property may not be fully supported on all platforms.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.ToastParameters.ImageHeight">
            <summary>
            The height of the image to display in the toast.
            This property may not be fully supported on all platforms.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.ToastParameters.VerticalOrientation">
            <summary>
            The location or layout style of the toast.
            </summary>
        </member>
        <member name="P:Codon.DialogModel.ToastParameters.AnimationType">
            <summary>
            The type of animation with which to present the toast.
            This property may not be fully supported on all platforms.
            </summary>
        </member>
        <member name="T:Codon.Services.IDialogService">
            <summary>
            This service is used to display messages to the user
            or to seek feedback from the user.
            In the implementation this is most often performed using 
            a modal dialog box or a toast.
            </summary>
        </member>
        <member name="M:Codon.Services.IDialogService.ShowMessageAsync(System.String,System.String)">
            <summary>
            Shows a message to a user that must be dismissed 
            before continuing.
            </summary>
            <param name="message">The message to display.</param>
            <param name="caption">
            The caption to display on the dialog.</param>
        </member>
        <member name="M:Codon.Services.IDialogService.ShowWarningAsync(System.String,System.String)">
            <summary>
            Shows a warning message to a user 
            that must be dismissed before continuing.
            </summary>
            <param name="message">The message to display.</param>
            <param name="caption">
            The caption to display on the dialog.</param>
        </member>
        <member name="M:Codon.Services.IDialogService.ShowErrorAsync(System.String,System.String)">
            <summary>
            Shows an error message to a user 
            that must be dismissed before continuing.
            </summary>
            <param name="message">The message to display.</param>
            <param name="caption">
            The caption to display on the dialog.</param>
        </member>
        <member name="M:Codon.Services.IDialogService.ShowDialogAsync(System.Object,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Int32,Codon.DialogModel.DialogController)">
            <summary>
            Presents a dialog to the user with the specified buttons.
            </summary>
            <param name="body">The body text or an object 
            to be displayed in the dialog, such as a custom view.</param>
            <param name="buttons">
            A list of objects that represent buttons.</param>
            <param name="caption">
            The caption to display on the dialog.</param>
            <param name="defaultAcceptButtonIndex">
            The index to return if the user 
            uses the platform specific acceptance gesture.</param>
            <param name="dialogController">
            An instance of the DialogController class that can 
            be used to dismiss the dialog from calling code.</param>
            <returns>The index of the selected button.</returns>
        </member>
        <member name="M:Codon.Services.IDialogService.ShowDialogAsync(System.Object,System.String,Codon.DialogModel.DialogButton,Codon.DialogModel.DialogImage,Codon.DialogModel.DialogController)">
            <summary>
            Presents a dialog to the user with the specified buttons.
            </summary>
            <param name="content">
            The body text. Ordinarily this is text,
            but it may be a platform specific control.</param>
            <param name="caption">
            The caption to display on the dialog.</param>
            <param name="dialogButton">
            The dialog button to display.</param>
            <param name="dialogImage">
            The dialog image to display. Default is none.</param>
            <param name="dialogController">
            An instance of the DialogController class that can 
            be used to dismiss the dialog from calling code.</param>
            <returns>A <see cref="T:Codon.DialogModel.DialogResult"/> reflecting 
            the users response.</returns>
        </member>
        <member name="M:Codon.Services.IDialogService.AskQuestionAsync``1(Codon.DialogModel.IQuestion{``0})">
            <summary>
            Asks a question to a user that must be dismissed 
            before continuing.
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="question"></param>
            <returns>A question result.</returns>
        </member>
        <member name="M:Codon.Services.IDialogService.AskOkCancelQuestionAsync(System.String,System.String)">
            <summary>
            Asks a question to a user that 
            must be dismissed before continuing.
            </summary>
            <param name="question"></param>
            <param name="caption"></param>
            <returns><c>true</c> if the user selected the OK button;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Codon.Services.IDialogService.AskYesNoQuestionAsync(System.String,System.String)">
            <summary>
            Asks a question to a user that must be dismissed 
            before continuing.
            </summary>
            <param name="question"></param>
            <param name="caption"></param>
            <returns><c>true</c> if the user selected the Yes button;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Codon.Services.IDialogService.AskYesNoCancelQuestionAsync(System.String,System.String)">
            <summary>
            Asks a question to a user that must be dismissed 
            before continuing.
            </summary>
            <param name="question">
            The question text displayed to the user.</param>
            <param name="caption">
            The caption of the dialog displayed to the user.</param>
            <returns>A <see cref="T:Codon.DialogModel.YesNoCancelQuestionResult"/> value
            reflecting the user response.</returns>
        </member>
        <member name="M:Codon.Services.IDialogService.ShowToastAsync(Codon.DialogModel.ToastParameters)">
            <summary>
            Shows a toast message to the user.
            </summary>
            <param name="toastParameters">
            Determines how the toast appears.</param>
            <returns></returns>
        </member>
        <member name="M:Codon.Services.IDialogService.ShowToastAsync(System.String,System.String)">
            <summary>
            Shows a toast message to the user.
            </summary>
            <param name="caption">The main heading of the toast.</param>
            <param name="body">The text content of the toast.</param>
            <returns></returns>
        </member>
        <member name="P:Codon.Services.IDialogService.DialogOpen">
            <summary>
            Indicates whether the dialog service currently 
            has an open dialog.
            </summary>
        </member>
        <member name="T:Codon.Services.IMessenger">
            <summary>
            This interface defines a pub/sub messaging system.
            Subscribers implement the <see cref="T:Codon.Messaging.IMessageSubscriber`1"/> 
            interface for each message type they wish to receive.
            Subscribers then register themselves, with the <c>IMessenger</c>
            implementation, by calling <see cref="M:Codon.Services.IMessenger.Subscribe(System.Object)"/>.
            When an object wishes to send a message to all objects
            implementing the <see cref="T:Codon.Messaging.IMessageSubscriber`1"/>
            interface, it calls <see cref="M:Codon.Services.IMessenger.PublishAsync``1(``0,System.Boolean,System.Type,System.String,System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Codon.Services.IMessenger.Subscribe(System.Object)">
            <summary>
            Notify the messenger that the specified object
            wishes to receive messages corresponding to that objects
            <see cref="T:Codon.Messaging.IMessageSubscriber`1"/> implementations.
            If the specified subscriber does not implement
            <see cref="T:Codon.Messaging.IMessageSubscriber`1"/> then the
            call to <see cref="M:Codon.Services.IMessenger.Subscribe(System.Object)" /> is ignored.
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="M:Codon.Services.IMessenger.Unsubscribe(System.Object)">
            <summary>
            Removes all subscriptions for the specified object.
            The subscriber no longer receives messages
            when <see cref="M:Codon.Services.IMessenger.PublishAsync``1(``0,System.Boolean,System.Type,System.String,System.String,System.Int32)"/> is called.
            This call has no effect if the specified subscriber
            was not previously subscribed.
            </summary>
            <param name="subscriber">The subscriber object
            that was previously subscribed to receive
            messages using the <see cref="M:Codon.Services.IMessenger.Subscribe(System.Object)"/> method.</param>
        </member>
        <member name="M:Codon.Services.IMessenger.PublishAsync``1(``0,System.Boolean,System.Type,System.String,System.String,System.Int32)">
            <summary>
            Asynchronously dispatches a message to all subscribers.
            </summary>
            <typeparam name="TEvent">
            Indicates the message type. Subscribers implementing 
            <see cref="T:Codon.Messaging.IMessageSubscriber`1"/>
            receive the message.</typeparam>
            <param name="eventToPublish">
            The message payload that is received by subscribers.</param>
            <param name="requireUIThread">
            If <c>true</c> messages are dispatched using the UI thread.
            If <c>false</c> and the call to <c>PublishAsync</c>
            is made not from the UI thread, then messages are
            dispatched are dispatched on the current thread.</param>
            <param name="recipientType">
            Allows you to restrict messages to those subscribers
            deriving from this type.</param>
            <param name="memberName">
            The class member name of the call origin.
            Automatically populated by the compiler.</param>
            <param name="filePath">
            The file path of the call origin.
            Automatically populated by the compiler.</param>
            <param name="lineNumber">
            The line number of the call origin.
            Automatically populated by the compiler.</param>
        </member>
        <member name="T:Codon.Services.INavigationService">
            <summary>
            This service provides information on the current page location 
            and allows the client to navigate within the application.
            </summary>
        </member>
        <member name="M:Codon.Services.INavigationService.GoBack">
            <summary>
            Navigates to the previous page.
            </summary>
        </member>
        <member name="P:Codon.Services.INavigationService.CanGoBack">
            <summary>
            Indicates that the application is able 
            to navigate to the previous page.
            </summary>
        </member>
        <member name="M:Codon.Services.INavigationService.Navigate(System.String)">
            <summary>
            Navigates to the specified relative URL.
            The URL should be relative to the root of the application 
            and begin with a slash e.g., "/Views/Settings.xaml".
            </summary>
            <param name="relativeUrl">The relative URL.</param>
        </member>
        <member name="T:Codon.Services.IStringParserService">
            <summary>
            This interface specifies the minimum capabilities of a string parser,
            which is able to take a string and resolve any embedded string tags.
            Tags are sections within strings having the format: 
            ${TagName[:Argument]} 
            where [:Argument] is optional.
            You can register a tag with its replacement text,
            or you can register an <see cref="T:Codon.ComponentModel.IConverter"/>
            that is used to replace the text.
            </summary>
        </member>
        <member name="M:Codon.Services.IStringParserService.Parse(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Parses the specified text. Resolves string tags within the text.
            </summary>
            <param name="text">The text.</param>
            <param name="tagValues">The custom tag values. 
            If a tag is found in the specified text 
            which matches one in the this parameter, 
            then the value in the dictionary will be substituted in the string.
            </param>
            <returns>The parsed string.</returns>
        </member>
        <member name="M:Codon.Services.IStringParserService.Parse(System.String)">
            <summary>
            Parses the specified text. Resolves string tags within the text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Codon.Services.IStringParserService.RegisterConverter(System.String,Codon.ComponentModel.IConverter)">
            <summary>
            Registers a converter with the specified tag name. 
            When subsequently calling Parse, if a tag is discovered in the text, 
            then the specified IConverter will be used to convert the tag 
            and substitute the tag in the text.
            </summary>
            <param name="tagName">The tag identifier. E.g., "Country". 
            When calling Parse, if the text contains a string "Greeting from ${Country}." 
            The specified converter will be used to create a string replacement 
            for the ${Country} tag.</param>
            <param name="converter">The converter.</param>
            <example></example>
        </member>
        <member name="T:Codon.Services.ISettingsService">
            <summary>
            This service allow settings to be persisted and restored.
            </summary>
        </member>
        <member name="M:Codon.Services.ISettingsService.GetSetting``1(System.String,``0)">
            <summary>
            Gets the setting instance with the specified key that is of the specified type.
            If no entity has been saved, then the specified default value is returned.
            </summary>
            <typeparam name="TSetting">The type of the setting.</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The located setting, or the default value if <code>null</code>.</returns>
        </member>
        <member name="M:Codon.Services.ISettingsService.GetSetting(System.String,System.Type,System.Object)">
            <summary>
            Gets the setting instance with the specified key that is of the specified type.
            If no entity has been saved, then the specified default value is returned.
            </summary>
            <param name="key">The setting key.</param>
            <param name="settingType">The type of the setting value.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The located setting, or the default value if <code>null</code>.</returns>
        </member>
        <member name="M:Codon.Services.ISettingsService.TryGetSetting(System.String,System.Type,System.Object@)">
            <summary>
            Attempts to retrieve the specified setting.
            </summary>
            <param name="key">The unique key of the setting.</param>
            <param name="settingType">The object type which is used to construct the setting.</param>
            <param name="setting">The retrieved setting if found.</param>
            <returns><c>true</c> if the setting exists; false otherwise.</returns>
        </member>
        <member name="M:Codon.Services.ISettingsService.TryGetSetting``1(System.String,``0@)">
            <summary>
            Attempts to retrieve the specified setting.
            </summary>
            <param name="key">The unique key of the setting.</param>
            <param name="setting">The retrieved setting if found.</param>
            <returns><c>true</c> if the setting exists; false otherwise.</returns>
        </member>
        <member name="M:Codon.Services.ISettingsService.GetSettingLocation(System.String)">
            <summary>
            Retrieve the location of the setting. <see cref="T:Codon.SettingsModel.StorageLocation"/>
            </summary>
            <param name="key">The setting key. Cannot be <c>null</c>.</param>
            <returns>The storage location of the setting, or <c>null</c> if setting is not found.</returns>
        </member>
        <member name="M:Codon.Services.ISettingsService.ContainsSetting(System.String)">
            <summary>
            Determines whether the specified key has a registered setting value.
            Note: Favor, whereever possible, the use of the generic form of this method, 
            as it first checks the cache, which is faster.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if a setting exists with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Codon.Services.ISettingsService.ContainsSetting``1(System.String)">
            <summary>
            Determines whether the specified key has a registered setting value.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if a setting exists with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Codon.Services.ISettingsService.SetSetting``1(System.String,``0,Codon.SettingsModel.StorageLocation)">
            <summary>
            Records the setting using the specified key as a unique identifier.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="value">The value.</param>
            <param name="storageLocation">When <c>Transient</c> the setting is retained only for the duration
            of current app's run. If <c>Local</c> the setting is retained across app restarts.
            When <c>Roaming</c> the value is associated with the user's account.</param>
            <returns><code>Successful</code> if the setting was correctly stored,
            <code>Cancelled</code> if a listener intervened an prevented cancelled the setting.
            Default is <c>Local</c>.</returns>
        </member>
        <member name="M:Codon.Services.ISettingsService.RemoveSetting(System.String)">
            <summary>
            Removes the setting with the specified key from all storage locations and cache.
            </summary>
            <param name="key">The name of the setting.</param>
            <returns><c>true</c> if a setting was removed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Codon.Services.ISettingsService.ClearSettings">
            <summary>
            Clears all settings.
            </summary>
        </member>
        <member name="M:Codon.Services.ISettingsService.ClearCache">
            <summary>
            Removes all entries from the cache. New GetSetting requests will resort 
            to retrieving items from the underlying storage.
            </summary>
        </member>
        <member name="M:Codon.Services.ISettingsService.RemoveCacheItem(System.String)">
            <summary>
            Removes a particular item from the cache.
            </summary>
            <param name="key">The setting key.</param>
        </member>
        <member name="E:Codon.Services.ISettingsService.SettingChanged">
            <summary>
            Occurs when a setting is changed.
            </summary>
        </member>
        <member name="E:Codon.Services.ISettingsService.SettingChanging">
            <summary>
            Occurs when a setting is about to change.
            </summary>
        </member>
        <member name="T:Codon.InversionOfControl.ContainerExtensions">
            <summary>
            Extension methods for classes implementing the 
            <see cref="T:Codon.InversionOfControl.IContainer"/> interface.
            </summary>
        </member>
        <member name="M:Codon.InversionOfControl.ContainerExtensions.InitializeContainer(Codon.InversionOfControl.IContainer)">
            <summary>
            Sets up the specified container to be used 
            as the principal container by the framework infrastructure.
            </summary>
            <param name="container">The container to use
            with the framework infrastructure.</param>
        </member>
        <member name="T:Codon.InversionOfControl.FrameworkContainer">
            <summary>
            This <c>IContainer</c> supports, singleton and non-singleton
            mapping from concrete types and interface types to concrete types,
            object instances, lambda expressions. 
            It also supports dependency injection.
            </summary>
        </member>
        <member name="P:Codon.InversionOfControl.FrameworkContainer.ThreadSafe">
            <summary>
            Prevents multiple threads from creating more 
            than one singleton instance.
            Decreases performance if <c>true</c>.
            Default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:Codon.InversionOfControl.FrameworkContainer.PropertyInjectionAttributesEnabled">
            <summary>
            If <c>true</c> the container resolves values for properties 
            that are decorated with a <seealso cref="T:Codon.InversionOfControl.InjectDependenciesAttribute"/>.
            There's a performance penalty for that. If you do not use
            <c>InjectDependenciesAttribute</c> for properties, 
            set this property to false to improve performance.
            Default value is <c>true</c>.
            </summary>
        </member>
        <member name="T:Codon.InversionOfControl.ResolutionException">
            <summary>
            Occurs when an exception is raised while attempting
            to resolve a object via the <see cref="T:Codon.InversionOfControl.FrameworkContainer"/>.
            </summary>
        </member>
        <member name="T:Codon.InversionOfControl.DefaultTypeAttribute">
            <summary>
            This class is used to specify a default
            concrete type for the <see cref="T:Codon.InversionOfControl.FrameworkContainer"/>
            to resolve types that do not have an existing type registration.
            This attribute has lower precedence than the 
            <seealso cref="T:Codon.InversionOfControl.DefaultTypeNameAttribute"/>.
            </summary>
        </member>
        <member name="P:Codon.InversionOfControl.DefaultTypeAttribute.Type">
            <summary>
            The concrete type that is resolved by the 
            <see cref="T:Codon.InversionOfControl.FrameworkContainer"/>.
            </summary>
        </member>
        <member name="P:Codon.InversionOfControl.DefaultTypeAttribute.Singleton">
            <summary>
            If <c>true</c> the object resolved by the 
            <see cref="T:Codon.InversionOfControl.FrameworkContainer"/> is registered as 
            a singleton.
            </summary>
        </member>
        <member name="T:Codon.InversionOfControl.DefaultTypeNameAttribute">
            <summary>
            This class is used to specify a default
            concrete type name for the <see cref="T:Codon.InversionOfControl.FrameworkContainer"/>
            to resolve types that do not have an existing type registration.
            The <see cref="T:Codon.InversionOfControl.FrameworkContainer"/> attempts to resolve
            the type from referenced assemblies depending on the platform.
            This attribute has higher precedence than the 
            <seealso cref="T:Codon.InversionOfControl.DefaultTypeNameAttribute"/>.
            <seealso cref="T:Codon.Platform.PlatformDetector"/>
            </summary>
        </member>
        <member name="M:Codon.InversionOfControl.DefaultTypeNameAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="typeName">
            The type name of a concrete class that implements
            the interface on which this attribute is placed.</param>
        </member>
        <member name="P:Codon.InversionOfControl.DefaultTypeNameAttribute.TypeName">
            <summary>
            The type name of a concrete class that implements
            the interface on which this attribute is placed.
            </summary>
        </member>
        <member name="P:Codon.InversionOfControl.DefaultTypeNameAttribute.Singleton">
            <summary>
            If <c>true</c> the object resolved by the 
            <see cref="T:Codon.InversionOfControl.FrameworkContainer"/> is registered as 
            a singleton.
            </summary>
        </member>
        <member name="T:Codon.InversionOfControl.IContainer">
            <summary>
            Required interface for an IoC container
            to be used with the framework.
            </summary>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.Register``2(System.Boolean,System.String)">
            <summary>
            Creates a type association between one type <c>TTo</c>, 
            to another type <c>TFrom</c>; so that when the <c>TFrom</c> type 
            is requested using e.g., <c>Resolve</c>, 
            an instance of <c>TTo</c> is returned. 
            </summary>
            <typeparam name="TFrom">The type forming the whole or partial key 
            for resolving the <c>TTo</c> type.</typeparam>
            <typeparam name="TTo">The associated type.</typeparam>
            <param name="key">The key. Can be <c>null</c>.</param>
            <param name="singleton">if set to <c>true</c> 
            only one instance will be created of the <c>TTo</c> type.</param>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.Register(System.Type,System.Type,System.Boolean,System.String)">
            <summary>
            Associate the <c>fromType</c> type with the specified 
            toType. When <c>Resolve</c> is called an instance
            of <c>toType</c> is created.
            </summary>
            <param name="fromType">The type used to resolve the object.</param>
            <param name="toType">The type to be created.</param>
            <param name="singleton">If <c>true</c> once an instance
            of <c>toType</c> is created, it is retained, and returned
            uppon subsequent calls to <c>Resolve</c>.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.Register``1(``0,System.String)">
            <summary>
            Associate the <c>TFrom</c> type with the specified 
            singleton instance.
            </summary>
            <typeparam name="TFrom">When <c>Resolve</c> is called
            using the specified type, the instance is returned.</typeparam>
            <param name="instance">The instance to be registered as a singleton.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.Register``1(System.Func{``0},System.Boolean,System.String)">
            <summary>
            Associate the generic type <c>TFrom</c> with a func
            to return an instance of type <c>TFrom</c>. 
            When <c>Resolve</c> is called, getInstanceFunc is used
            to resolve an instance of <c>TFrom</c>. If <c>singleton</c>
            is <c>true</c>, the instance is retained and returned
            upon subsequent calls to <c>Resolve</c>.
            </summary>
            <param name="getInstanceFunc">Retrieves an instance
            of type <c>TFrom</c>.</param>
            <param name="singleton">If <c>true</c> once an instance
            of <c>TFrom</c> is created, it is retained, and returned
            uppon subsequent calls to <c>Resolve</c>.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.Register(System.Type,System.Func{System.Object},System.Boolean,System.String)">
            <summary>
            Associate the <c>fromType</c> with a func
            to return an instance of that type. 
            When <c>Resolve</c> is called, getInstanceFunc is used
            to resolve an object that derives from <c>fromType</c>. 
            If <c>singleton</c> is <c>true</c>, the instance is retained 
            and returned upon subsequent calls to <c>Resolve</c>.
            </summary>
            <param name="type">
            The type to associate with the specified func.
            When an object of type <c>type</c> is requested by a caller,
            the <c>getInstanceFunc</c> is used top resolve
            an instance of that type.</param>
            <param name="getInstanceFunc">Retrieves an instance
            of type <c>fromType</c>.</param>
            <param name="singleton">If <c>true</c> once an instance
            of <c>fromType</c> is created, it is retained, and returned
            uppon subsequent calls to <c>Resolve</c>.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.Register(System.Type,System.Object,System.String)">
            <summary>
            Associate the <c>fromType</c> type with the specified 
            instance. When <c>Resolve</c> is called the instance
            is returned.
            </summary>
            <param name="fromType">
            The type used to resolve the object.</param>
            <param name="instance">
            An instance deriving from <c>fromType</c>.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.Resolve``1(System.String)">
            <summary>
            Resolves an object instance deriving from the specified
            from type <c>T</c>.
            </summary>
            <typeparam name="T">The registered from type mapping.
            </typeparam>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
            <returns>An instance of <c>T</c>.</returns>
            <exception cref="T:Codon.InversionOfControl.ResolutionException">
            Is raised if the type is unable to be located,
            or an exception is raised during resolution.</exception>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.Resolve(System.Type,System.String)">
            <summary>
            Resolves an object instance deriving from the specified
            from type <c>T</c>.
            </summary>
            <param name="type">The registered from type mapping.
            </param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
            <returns>An instance of <c>T</c>.
            Can be <c>null</c>.</returns>
            <exception cref="T:Codon.InversionOfControl.ResolutionException">
            Is raised if the type is unable to be located,
            or an exception is raised during resolution.</exception>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.ResolveAll``1">
            <summary>
            Resolves all types that have a type registeration
            for the specified <c>TFrom</c> type.
            </summary>
            <typeparam name="TFrom">The from type mapping.</typeparam>
            <returns>All objects that are registered with the 
            specified 'from type' mapping.</returns>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.ResolveAll(System.Type)">
            <summary>
            Resolves all types that have a type registeration
            for the specified <c>fromType</c> type.
            </summary>
            <returns>All objects that are registered with the 
            specified 'from type' mapping.</returns>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.ResolveAll(System.String)">
            <summary>
            Resolves all objects that have a type registeration
            with the specified key.
            </summary>
            <returns>All objects that are registered with the 
            specified key mapping.</returns>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.IsRegistered``1(System.String)">
            <summary>
            Determines if there is a type registeration from the 
            specified from type <c>T</c>.
            </summary>
            <typeparam name="T">The registered from type.</typeparam>
            <returns><c>true</c> if a type registeration exists;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Codon.InversionOfControl.IContainer.IsRegistered(System.Type,System.String)">
            <summary>
            Determines if there is a type registeration from the 
            specified from type <c>fromType</c>.
            </summary>
            <param name="fromType">
            The registered from type mapping.</param>
            <returns><c>true</c> if a type registeration exists;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Codon.InversionOfControl.InjectDependenciesAttribute">
            <summary>
            This attribute is used to instruct 
            the <see cref="T:Codon.InversionOfControl.FrameworkContainer"/>
            to automatically populate properties 
            of an object during creation.
            It is also used to instruct the <c>FrameworkContainer</c>
            to use a specific constructor during object instantiation.
            </summary>
        </member>
        <member name="T:Codon.Dependency">
            <summary>
            This class is used to retrieve object instances, using type associations,
            and to create associations between types and object instances.
            </summary>
        </member>
        <member name="M:Codon.Dependency.Register``2(System.Boolean,System.String)">
            <summary>
            Creates a type association between one type TTo, to another type TFrom;
            so that when the TFrom type is requested using e.g., <c>Resolve</c>, 
            an instance of the TTo type is returned. 
            </summary>
            <typeparam name="TFrom">The type forming the whole or partial key 
            for resolving the TTo type.</typeparam>
            <typeparam name="TTo">The associated type.</typeparam>
            <param name="key">The key. Can be <c>null</c>.</param>
            <param name="singleton">if set to <c>true</c> 
            only one instance will be created of the TTo type.</param>
        </member>
        <member name="M:Codon.Dependency.Register``1(``0,System.String)">
            <summary>
            Associate the <c>TFrom</c> type with the specified 
            singleton instance.
            </summary>
            <typeparam name="TFrom">When <c>Resolve</c> is called
            using the specified type, the instance is returned.</typeparam>
            <param name="instance">The instance to be registered as a singleton.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
        </member>
        <member name="M:Codon.Dependency.Register(System.Type,System.Type,System.Boolean,System.String)">
            <summary>
            Associate the <c>fromType</c> type with the specified 
            toType. When <c>Resolve</c> is called an instance
            of <c>toType</c> is created.
            </summary>
            <param name="fromType">The type used to resolve the object.</param>
            <param name="toType">The type to be created.</param>
            <param name="singleton">If <c>true</c> once an instance
            of <c>toType</c> is created, it is retained, and returned
            uppon subsequent calls to <c>Resolve</c>.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
        </member>
        <member name="M:Codon.Dependency.Register(System.Type,System.Object,System.String)">
            <summary>
            Associate the <c>fromType</c> type with the specified 
            instance. When <c>Resolve</c> is called the instance
            is returned.
            </summary>
            <param name="fromType">
            The type used to resolve the object.</param>
            <param name="instance">
            An instance deriving from <c>fromType</c>.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
        </member>
        <member name="M:Codon.Dependency.Register``1(System.String,System.Boolean)">
            <summary>
            Associate the generic type T. 
            When <c>Resolve</c> is called an instance
            of <c>T</c> is created. If <c>singleton</c>
            is <c>true</c>, the instance is retained and returned
            upon subsequent calls to <c>Resolve</c>.
            </summary>
            <param name="singleton">If <c>true</c> once an instance
            of <c>T</c> is created, it is retained, and returned
            uppon subsequent calls to <c>Resolve</c>.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
        </member>
        <member name="M:Codon.Dependency.Register``1(System.Func{``0},System.Boolean,System.String)">
            <summary>
            Associate the generic type <c>TFrom</c> with a func
            to return an instance of type <c>TFrom</c>. 
            When <c>Resolve</c> is called, getInstanceFunc is used
            to resolve an instance of <c>TFrom</c>. If <c>singleton</c>
            is <c>true</c>, the instance is retained and returned
            upon subsequent calls to <c>Resolve</c>.
            </summary>
            <param name="getInstanceFunc">Retrieves an instance
            of type <c>TFrom</c>.</param>
            <param name="singleton">If <c>true</c> once an instance
            of <c>TFrom</c> is created, it is retained, and returned
            uppon subsequent calls to <c>Resolve</c>.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
        </member>
        <member name="M:Codon.Dependency.Register(System.Type,System.Func{System.Object},System.Boolean,System.String)">
            <summary>
            Associate the <c>fromType</c> with a func
            to return an instance of that type. 
            When <c>Resolve</c> is called, getInstanceFunc is used
            to resolve an object that derives from <c>fromType</c>. 
            If <c>singleton</c> is <c>true</c>, the instance is retained 
            and returned upon subsequent calls to <c>Resolve</c>.
            </summary>
            <param name="fromType">
            The type to associate with the specified func.
            When an object of type <c>fromType</c> is requested by a caller,
            the <c>getInstanceFunc</c> is used top resolve
            an instance of that type.</param>
            <param name="getInstanceFunc">Retrieves an instance
            of type <c>fromType</c>.</param>
            <param name="singleton">If <c>true</c> once an instance
            of <c>fromType</c> is created, it is retained, and returned
            uppon subsequent calls to <c>Resolve</c>.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
        </member>
        <member name="M:Codon.Dependency.IsRegistered``1">
            <summary>
            Determines if there is a type registeration from the 
            specified from type <c>T</c>.
            </summary>
            <typeparam name="T">The registered from type.</typeparam>
            <returns><c>true</c> if a type registeration exists;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Codon.Dependency.IsRegistered(System.Type)">
            <summary>
            Determines if there is a type registeration from the 
            specified from type <c>fromType</c>.
            </summary>
            <param name="fromType">
            The registered from type mapping.</param>
            <returns><c>true</c> if a type registeration exists;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Codon.Dependency.Resolve``1(System.String)">
            <summary>
            Resolves an object instance deriving from the specified
            from type <c>T</c>.
            </summary>
            <typeparam name="T">The registered from type mapping.
            </typeparam>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
            <returns>An instance of <c>T</c>.</returns>
            <exception cref="T:Codon.InversionOfControl.ResolutionException">
            Is raised if the type is unable to be located,
            or an exception is raised during resolution.</exception>
        </member>
        <member name="M:Codon.Dependency.ResolveWithType(System.Type,System.String)">
            <summary>
            Resolves an object instance deriving from the specified
            from type <c>T</c>.
            </summary>
            <param name="type">The registered from type mapping.
            </param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
            <returns>An instance of <c>T</c>.
            Can be <c>null</c>.</returns>
            <exception cref="T:Codon.InversionOfControl.ResolutionException">
            Is raised if the type is unable to be located,
            or an exception is raised during resolution.</exception>
        </member>
        <member name="M:Codon.Dependency.Resolve``2(System.Boolean,System.String)">
            <summary>
            Resolves an object instance deriving from the specified
            from type <c>TFrom</c>.
            </summary>
            <typeparam name="TFrom">The registered from type mapping.
            </typeparam>
            <typeparam name="TDefaultImplementation">
            If no type mapping is associated with the <c>TFrom</c> type,
            than an instance of <c>TDefaultImplementation</c> is returned.
            </typeparam>
            <param name="singleton">If <c>true</c> once an instance
            of <c>fromType</c> is created, it is retained, and returned
            uppon subsequent calls to <c>Resolve</c>.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
            <returns>An instance of <c>T</c>.
            Can be <c>null</c>.</returns>
            <exception cref="T:Codon.InversionOfControl.ResolutionException">
            Is raised if the type is unable to be located,
            or an exception is raised during resolution.</exception>
        </member>
        <member name="M:Codon.Dependency.ResolveOrRegister``1(``0,System.Boolean,System.String)">
            <summary>
            Resolves an object instance deriving from the specified
            from type <c>TFrom</c>.
            </summary>
            <typeparam name="TFrom">The registered from type mapping.
            </typeparam>
            <param name="defaultImplementation">
            If no type mapping is associated with the <c>TFrom</c> type,
            than the <c>TDefaultImplementation</c> instance is returned.
            </param>
            <param name="singleton">If <c>true</c> once an instance
            of <c>fromType</c> is created, it is retained, and returned
            uppon subsequent calls to <c>Resolve</c>.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
            <returns>An instance of <c>T</c>.
            Can be <c>null</c>.</returns>
            <exception cref="T:Codon.InversionOfControl.ResolutionException">
            Is raised if the type is unable to be located,
            or an exception is raised during resolution.</exception>
        </member>
        <member name="M:Codon.Dependency.TryResolve``1(``0@,System.String)">
            <summary>
            Attempts to resolves an object instance deriving from the specified
            from type <c>T</c>.
            </summary>
            <typeparam name="T">The registered from type mapping.
            </typeparam>
            <param name="result">The resulting object of type <c>T</c>.
            </param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
            <returns>An instance of <c>T</c>.
            Can be <c>null</c>.</returns>
            <exception cref="T:Codon.InversionOfControl.ResolutionException">
            Is raised if the type is unable to be located,
            or an exception is raised during resolution.</exception>
        </member>
        <member name="M:Codon.Dependency.TryResolve(System.Type,System.Object@,System.String)">
            <summary>
            Attempts to resolves an object instance deriving 
            from the specified <c>type</c>.
            </summary>
            <param name="type">The registered from type mapping.
            </param>
            <param name="result">The resulting object.</param>
            <param name="key">Multiple instance can be associated
            with a type. The key is used to differentiate them.</param>
            <returns><c>true</c> if a registered type exists for the 
            specified type; <c>false</c> otherwise.</returns>
            <exception cref="T:Codon.InversionOfControl.ResolutionException">
            Is raised if the type is unable to be located,
            or an exception is raised during resolution.</exception>
        </member>
        <member name="M:Codon.Dependency.ResolveAll``1">
            <summary>
            Resolves all types that have a type registeration
            for the specified <c>TFrom</c> type.
            </summary>
            <typeparam name="TFrom">The from type mapping.</typeparam>
            <returns>All objects that are registered with the 
            specified 'from type' mapping.</returns>
        </member>
        <member name="P:Codon.Dependency.Initialized">
            <summary>
            This property indicates whether or not an
            <see cref="T:Codon.InversionOfControl.IContainer"/> has been associated
            with the <c>Dependency</c> class.
            </summary>
        </member>
        <member name="T:Codon.IO.ApplicationResourceUtility">
            <summary>
            This class is used to retrieve files from the application package.
            </summary>
        </member>
        <member name="M:Codon.IO.ApplicationResourceUtility.GetApplicationResourceStreamAsync(System.Uri)">
            <summary>
            Not yet implemented.
            </summary>
            <param name="resourceUri"></param>
            <returns></returns>
        </member>
        <member name="T:Codon.IO.BinarySerializer">
            <summary>
            This class is the default implementation of the
            <see cref="T:Codon.IO.IBinarySerializer"/> interface
            and is used, for example, by the settings system 
            to save and restore objects.
            See the <see cref="T:Codon.IO.IBinarySerializer"/> for API
            documentation.
            </summary>
        </member>
        <member name="T:Codon.IO.IBinarySerializer">
            <summary>
            This interface defines the required capabilities
            of a binary serializer that is used, for example,
            by the framework to persist objects as settings. 
            </summary>
        </member>
        <member name="M:Codon.IO.IBinarySerializer.Serialize(System.Object)">
            <summary>
            Converts an <c>object</c> to a <c>byte[]</c>.
            This method performs the inverse operation 
            of <see cref="M:Codon.IO.IBinarySerializer.Deserialize(System.IO.Stream)"/>.
            </summary>
            <param name="item">The object to convert.</param>
            <returns>A <c>byte[]</c> representing 
            the specified item.</returns>
        </member>
        <member name="M:Codon.IO.IBinarySerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Converts an <c>object</c> to a <c>byte[]</c>
            and writes it to the specified output stream.
            This method performs the inverse operation 
            of <see cref="M:Codon.IO.IBinarySerializer.Deserialize(System.IO.Stream)"/>.
            </summary>
            <param name="item">The object to convert.</param>
            <param name="outputStream">
            The stream to write the specified item.</param>
        </member>
        <member name="M:Codon.IO.IBinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            Converts the specified <c>byte[]</c>
            to an object of type <c>T</c>.
            This is the inverse operation to 
            <see cref="M:Codon.IO.IBinarySerializer.Serialize(System.Object)"/>
            </summary>
            <typeparam name="T">The type of the object
            to be returned.</typeparam>
            <param name="array">The serialized object array.</param>
            <returns>The object represented by the specified array.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Occurs if the object represented by the specified array
            is not of the type specified by the type parameter <c>T</c>.
            </exception>
        </member>
        <member name="M:Codon.IO.IBinarySerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Converts the specified <c>Stream</c>
            to an object of type <c>T</c>.
            This is the inverse operation to 
            <see cref="M:Codon.IO.IBinarySerializer.Serialize(System.Object,System.IO.Stream)"/>
            </summary>
            <typeparam name="T">The type of the object
            to be returned.</typeparam>
            <param name="stream">The serialized object stream.</param>
            <returns>The object represented by the specified stream.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Occurs if the object represented by the specified array
            is not of the type specified by the type parameter <c>T</c>.
            </exception>
        </member>
        <member name="M:Codon.IO.IBinarySerializer.Deserialize(System.IO.Stream)">
            <returns>The object represented by the specified stream.
            </returns>
        </member>
        <member name="T:Codon.IO.IJsonConvertible">
            <summary>
            Provides for conversion and population to and from JSON.
            Allows an object instance to be converted 
            to JSON and perhaps serialized.
            </summary>
        </member>
        <member name="M:Codon.IO.IJsonConvertible.FromJson(System.String)">
            <summary>
            Populates the instance from the values 
            in the specified JSON string.
            This is the reverse process of <see cref="M:Codon.IO.IJsonConvertible.ToJson"/>.
            </summary>
            <param name="json">The json text.</param>
        </member>
        <member name="M:Codon.IO.IJsonConvertible.ToJson">
            <summary>
            Convert to a JSON string. 
            This is the reverse process of <see cref="M:Codon.IO.IJsonConvertible.FromJson(System.String)"/>.
            </summary>
            <returns>A string representing the current 
            object instance in JSON format.</returns>
        </member>
        <member name="T:Codon.IO.IIsolatedStorageUtility">
            <summary>
            Defines utility methods for an application's isolated storage.
            </summary>
        </member>
        <member name="M:Codon.IO.IIsolatedStorageUtility.CopyApplicationResourceToIsolatedStorageAsync(System.String,System.String)">
            <summary>
            Asynchonously copies a resource to a specified
            isolated storage folder.
            </summary>
            <param name="inResourceName"></param>
            <param name="outFilename"></param>
        </member>
        <member name="M:Codon.IO.IIsolatedStorageUtility.CopyApplicationResourcesToIsolatedStorageAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Asynchronously copies a set of files to a new location 
            in isolated storage.
            </summary>
            <param name="sourceToDestinationList">
            The from/to mappings.</param>
        </member>
        <member name="M:Codon.IO.IIsolatedStorageUtility.FileExists(System.String)">
            <summary>
            Determines if a file exists in isolated storage.
            </summary>
            <param name="path">The relative path to the file.</param>
            <returns><c>true</c> if the file exists; 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Codon.IO.IsolatedStorageUtility">
            <summary>
            The default implementation of the <see cref="T:Codon.IO.IIsolatedStorageUtility"/>
            interface.
            </summary>
        </member>
        <member name="T:Codon.IO.IXmlConvertible">
            <summary>
            Provides for conversion and population to and from an XElement.
            Allows an object instance to be converted to XML.
            </summary>
        </member>
        <member name="M:Codon.IO.IXmlConvertible.FromXElement(System.Xml.Linq.XElement)">
            <summary>
            Populates the instance from the values 
            in the specified element.
            This is the reverse process of <see cref="M:Codon.IO.IXmlConvertible.ToXElement"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Codon.IO.IXmlConvertible.ToXElement">
            <summary>
            Convert to an XElement. 
            This is the reverse process of <see cref="M:Codon.IO.IXmlConvertible.FromXElement(System.Xml.Linq.XElement)"/>.
            </summary>
            <returns>An element representing 
            the current object instance.</returns>
        </member>
        <member name="T:Codon.IO.MementoIncompatibilityException">
            <summary>
            This exception is raised when, during the process of deserialization, 
            a serialized memento is found with a higher version than 
            can be handled. This usually indicates an older application
            version is being used to open a file that was created 
            in a newer version.
            </summary>
        </member>
        <member name="P:Codon.IO.MementoIncompatibilityException.ExpectedMementoVersion">
            <summary>
            Gets or sets the expected memento version 
            that is supported by the memento type.
            </summary>
            <value>The expected memento version 
            that is supported by the memento type.</value>
        </member>
        <member name="P:Codon.IO.MementoIncompatibilityException.ActualMementoVersion">
            <summary>
            Gets or sets the actual memento version 
            that was found on the saved memento.
            </summary>
            <value>The actual memento version 
            that was found on the saved memento.</value>
        </member>
        <member name="M:Codon.IO.MementoIncompatibilityException.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Codon.IO.MementoIncompatibilityException"/> class.
            </summary>
            <param name="expectedMementoVersion">
            The memento version that is supported.</param>
            <param name="actualMementoVersion">
            The memento version that was found on the saved memento.
            </param>
            <param name="message">
            The message that may contain 
            detailed information pertaining the exception.</param>
        </member>
        <member name="T:Codon.IO.StreamExtensions">
            <summary>
            Extension methods for the <see cref="T:System.IO.Stream"/> class.
            </summary>
        </member>
        <member name="M:Codon.IO.StreamExtensions.CopyToStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Copies the bytes from one <c>Stream</c> to another.
            </summary>
            <param name="fromStream">
            The Stream containing the data to be copied.</param>
            <param name="toStream">
            The destination stream.</param>
            <param name="closeToStream">
            If <c>true</c> the specified <c>toStream</c>
            will be closed after the bytes are copied.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs if either <c>Stream</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Codon.IO.StreamExtensions.ToBytes(System.IO.Stream)">
            <summary>
            Reads alls bytes from the specified <c>Stream</c>.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>All bytes in the specified <c>Stream</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs if the specified <c>Stream</c> is <c>null</c>.</exception>
        </member>
        <member name="T:Codon.IO.Serialization.DoNotSerialize">
            <summary>
              Indicates that a property or field should not be serialized
            </summary>
        </member>
        <member name="T:Codon.IO.Serialization.DoNotChecksum">
            <summary>
            Used in checksum mode to flag a property as not being part
            of the "meaning" of an object - i.e. two objects with the
            same checksum "mean" the same thing, even if some of the
            properties are different, those properties would not be
            relevant to the purpose of the object
            </summary>
        </member>
        <member name="T:Codon.IO.Serialization.SerializerId">
            <summary>
            Attribute used to flag IDs this can be useful for check object
            consistence when the serializer is in a mode that does not 
            serialize identifiers
            </summary>
        </member>
        <member name="T:Codon.IO.Serialization.SilverlightSerializer">
            <summary>
              Silverlight/.NET compatible binary serializer with suppression support
              produces compact representations, suitable for further compression
            </summary>
        </member>
        <member name="T:Codon.IO.Serialization.SilverlightSerializer.TypeMappingEventArgs">
            <summary>
            Arguments for a missing type event
            </summary>
        </member>
        <member name="F:Codon.IO.Serialization.SilverlightSerializer.TypeMappingEventArgs.TypeName">
            <summary>
            The missing types name
            </summary>
        </member>
        <member name="F:Codon.IO.Serialization.SilverlightSerializer.TypeMappingEventArgs.UseType">
            <summary>
            Supply a type to use instead
            </summary>
        </member>
        <member name="E:Codon.IO.Serialization.SilverlightSerializer.MapMissingType">
            <summary>
            Event that is fired if a particular type cannot be found
            </summary>
        </member>
        <member name="P:Codon.IO.Serialization.SilverlightSerializer.IsChecksum">
            <summary>
            Put the serializer into Checksum mode
            </summary>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserialize to a type
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserialize from a stream to a type
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.GetChecksum(System.Object)">
            <summary>
            Get a checksum for an item.  Checksums "should" be different 
            for every object that has a different "meaning".  You can
            flag properties as DoNotChecksum if that helps to keep decorative
            properties away from the checksum whilst including meaningful ones
            </summary>
            <param name="item">The object to checksum</param>
            <returns>A checksum string, this includes no illegal characters and can be used as a file name</returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.RegisterSerializationAssembly(System.Reflection.Assembly)">
            <summary>
            Register all of the custom serializers in an assembly
            </summary>
            <param name="assembly">Leave blank to register the assembly that the method is called from, or pass an assembly</param>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.ScanAllTypesForAttribute(Codon.IO.Serialization.SilverlightSerializer.ScanTypeFunction,System.Reflection.Assembly,System.Type)">
            <summary>
            Scan all of the types in an assembly for a particular attribute
            </summary>
            <param name="function">The function to call</param>
            <param name="assembly">The assembly to scan</param>
            <param name="attribute">The attribute to look for</param>
        </member>
        <member name="F:Codon.IO.Serialization.SilverlightSerializer.Vanilla">
            <summary>
            Dictionary of all the used objects to check if properties are different
            to those set during construction
            </summary>
        </member>
        <member name="F:Codon.IO.Serialization.SilverlightSerializer.IsLoud">
            <summary>
            Write persistence debugging information to the debug output window
            often used with Verbose
            </summary>
        </member>
        <member name="F:Codon.IO.Serialization.SilverlightSerializer.Verbose">
            <summary>
            Write all types, even if they are known, often used with Loud mode
            </summary>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.GetPropertyInfo(System.Type)">
            <summary>
              Caches and returns property info for a type
            </summary>
            <param name = "itm">The type that should have its property info returned</param>
            <returns>An enumeration of PropertyInfo objects</returns>
            <remarks>
              It should be noted that the implementation converts the enumeration returned from reflection to an array as this more than double the speed of subsequent reads
            </remarks>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.GetFieldInfo(System.Type)">
            <summary>
              Caches and returns field info for a type
            </summary>
            <param name = "itm">The type that should have its field info returned</param>
            <returns>An enumeration of FieldInfo objects</returns>
            <remarks>
              It should be noted that the implementation converts the enumeration returned from reflection to an array as this more than double the speed of subsequent reads
            </remarks>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.GetPropertyDefinitionId(System.String)">
            <summary>
              Returns a token that represents the name of the property
            </summary>
            <param name = "name">The name for which to return a token</param>
            <returns>A 2 byte token representing the name</returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.Deserialize(System.IO.Stream,System.Object)">
            <summary>
            Deserializes from a stream, potentially into an existing instance
            </summary>
            <param name="inputStream">Stream to deserialize from</param>
            <param name="instance">Instance to use</param>
            <returns></returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.Deserialize(System.Byte[])">
            <summary>
              Convert a previously serialized object from a byte array 
              back into a .NET object
            </summary>
            <param name = "bytes">The data stream for the object</param>
            <returns>The rehydrated object represented by the data supplied</returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.DeserializeInto(System.Byte[],System.Object)">
            <summary>
              Convert a previously serialized object from a byte array 
              back into a .NET object
            </summary>
            <param name = "bytes">The data stream for the object</param>
            <param name="instance"></param>
            <returns>The rehydrated object represented by the data supplied</returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.CreateStacks">
            <summary>
              Creates a set of stacks on the current thread
            </summary>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.DeserializeObject(System.IO.BinaryReader,System.Type,System.Object)">
            <summary>
              Deserializes an object or primitive from the stream
            </summary>
            <param name = "reader">The reader of the binary file</param>
            <param name = "itemType">The expected type of the item being read (supports compact format)</param>
            <param name="instance"></param>
            <returns>The value read from the file</returns>
            <remarks>
              The function is supplied with the type of the property that the object was stored in (if known) this enables
              a compact format where types only have to be specified if they differ from the expected one
            </remarks>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.DeserializeArray(System.Type,System.IO.BinaryReader,System.Int32)">
            <summary>
              Deserializes an array of values
            </summary>
            <param name = "itemType">The type of the array</param>
            <param name = "reader">The reader of the stream</param>
            <param name="count"></param>
            <returns>The deserialized array</returns>
            <remarks>
              This routine optimizes for arrays of primitives and bytes
            </remarks>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.DeserializeMultiDimensionArray(System.Type,System.IO.BinaryReader,System.Int32)">
            <summary>
              Deserializes a multi-dimensional array of values
            </summary>
            <param name = "itemType">The type of the array</param>
            <param name = "reader">The reader of the stream</param>
            <param name="count">The base size of the multi-dimensional array</param>
            <returns>The deserialized array</returns>
            <remarks>
              This routine deserializes values serialized on a 'row by row' basis, and
              calls into DeserializeArray to do this
            </remarks>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.DeserializeDictionary(System.Collections.IDictionary,System.Type,System.IO.BinaryReader)">
            <summary>
              Deserializes a dictionary from storage, handles generic types with storage optimization
            </summary>
            <param name = "o">The newly created dictionary</param>
            <param name = "itemType">The type of the dictionary</param>
            <param name = "reader">The binary reader for the current bytes</param>
            <returns>The dictionary object updated with the values from storage</returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.DeserializeList(System.Collections.IList,System.Type,System.IO.BinaryReader)">
            <summary>
              Deserialize a list from the data stream
            </summary>
            <param name = "o">The newly created list</param>
            <param name = "itemType">The type of the list</param>
            <param name = "reader">The reader for the current bytes</param>
            <returns>The list updated with values from the stream</returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.DeserializeObjectAndProperties(System.Object,System.Type,System.IO.BinaryReader)">
            <summary>
              Deserializes a class based object that is not a collection, looks for both public properties and fields
            </summary>
            <param name = "o">The object being deserialized</param>
            <param name = "itemType">The type of the object</param>
            <param name = "reader">The reader for the current stream of bytes</param>
            <returns>The object updated with values from the stream</returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.DeserializeProperties(System.IO.BinaryReader,System.Type,System.Object)">
            <summary>
              Deserializes the properties of an object from the stream
            </summary>
            <param name = "reader">The reader of the bytes in the stream</param>
            <param name = "itemType">The type of the object</param>
            <param name = "o">The object to deserialize</param>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.DeserializeFields(System.IO.BinaryReader,System.Type,System.Object)">
            <summary>
              Deserializes the fields of an object from the stream
            </summary>
            <param name = "reader">The reader of the bytes in the stream</param>
            <param name = "itemType">The type of the object</param>
            <param name = "o">The object to deserialize</param>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.Serialize(System.Object)">
            <summary>
              Serialize an object into an array of bytes
            </summary>
            <param name = "item">The object to serialize</param>
            <returns>A byte array representation of the item</returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.Serialize(System.Object,System.Boolean)">
            <summary>
              Serialize an object into an array of bytes
            </summary>
            <param name = "item">The object to serialize</param>
            <param name="makeVerbose">Whether the object should be serialized for forwards compatibility</param>
            <returns>A byte array representation of the item</returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.IsSimpleType(System.Type)">
            <summary>
              Return whether the type specified is a simple type that can be serialized fast
            </summary>
            <param name = "tp">The type to check</param>
            <returns>True if the type is a simple one and can be serialized directly</returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.WriteValue(System.IO.BinaryWriter,System.Object)">
            <summary>
              Write a basic untyped value
            </summary>
            <param name = "writer">The writer to commit byte to</param>
            <param name = "value">The value to write</param>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.ReadValue(System.IO.BinaryReader,System.Type)">
            <summary>
              Read a basic value from the stream
            </summary>
            <param name = "reader">The reader with the stream</param>
            <param name = "tp">The type to read</param>
            <returns>The hydrated value</returns>
        </member>
        <member name="M:Codon.IO.Serialization.SilverlightSerializer.GetTypeId(System.Type)">
            <summary>
              Logs a type and returns a unique token for it
            </summary>
            <param name = "tp">The type to retrieve a token for</param>
            <returns>A 2 byte token representing the type</returns>
        </member>
        <member name="T:Codon.Logging.ILog">
            <summary>
            Represents a output channel 
            for storing or transmitting log messages.
            </summary>
        </member>
        <member name="M:Codon.Logging.ILog.WriteAsync(Codon.Logging.LogLevel,System.String,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Int32)">
            <summary>
            Writes a message to the log. 
            This is the usual override point for an implementation 
            of an <c>ILog</c> implementation.
            </summary>
            <param name="logLevel">Is used by filters to decide 
            whether to process the message.</param>
            <param name="message">The textual content of the entry.</param>
            <param name="exception">Can be null.</param>
            <param name="properties">Can be null. A optional list of properties 
            that may (or may not) be used by a particular <c>ILog</c> implementation.</param>
            <param name="memberName">The current member.</param>
            <param name="filePath">The name of the file.</param>
            <param name="lineNumber">The originating line number.</param>
        </member>
        <member name="M:Codon.Logging.ILog.IsLogEnabledForLevel(Codon.Logging.LogLevel)">
            <summary>
            Determines if a log entry will be created
            at the specified level. Use this method
            to prevent the unnecessary log entry preparation.
            </summary>
            <param name="logLevel"></param>
            <returns><c>true</c> if a call at the specified <seealso cref="T:Codon.Logging.LogLevel"/>
            will succeed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Codon.Logging.ILog.Trace(System.String,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Int32)">
            <summary>
            Writes a log entry 
            at the <see cref="F:Codon.Logging.LogLevel.Trace"/> level.
            The log entry is not processed if the minimum log level
            is greater than the trace level.
            </summary>
            <param name="message">The message to be written to the log.</param>
            <param name="exception">An exception to be written to the log. 
            (Can be null)</param>
            <param name="properties">A dictionary of properties 
            that may be leveraged by the <c>ILog</c> implementation.</param>
            <param name="memberName">
            The class member name of the call origin.
            Automatically populated by the compiler.</param>
            <param name="filePath">
            The file path of the call origin.
            Automatically populated by the compiler.</param>
            <param name="lineNumber">
            The line number of the call origin.
            Automatically populated by the compiler.</param>
        </member>
        <member name="M:Codon.Logging.ILog.Debug(System.String,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Int32)">
            <summary>
            Writes a log entry 
            at the <see cref="F:Codon.Logging.LogLevel.Debug"/> level.
            The log entry is not processed if the minimum log level
            is greater than the debug level.
            </summary>
            <param name="message">The message to be written to the log.</param>
            <param name="exception">An exception to be written to the log. 
            (Can be null)</param>
            <param name="properties">A dictionary of properties 
            that may be leveraged by the <c>ILog</c> implementation.</param>
            <param name="memberName">
            The class member name of the call origin.
            Automatically populated by the compiler.</param>
            <param name="filePath">
            The file path of the call origin.
            Automatically populated by the compiler.</param>
            <param name="lineNumber">
            The line number of the call origin.
            Automatically populated by the compiler.</param>
        </member>
        <member name="M:Codon.Logging.ILog.Info(System.String,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Int32)">
            <summary>
            Writes a log entry 
            at the <see cref="F:Codon.Logging.LogLevel.Info"/> level.
            The log entry is not processed if the minimum log level
            is greater than the info level.
            </summary>
            <param name="message">The message to be written to the log.</param>
            <param name="exception">An exception to be written to the log. 
            (Can be null)</param>
            <param name="properties">A dictionary of properties 
            that may be leveraged by the <c>ILog</c> implementation.</param>
            <param name="memberName">
            The class member name of the call origin.
            Automatically populated by the compiler.</param>
            <param name="filePath">
            The file path of the call origin.
            Automatically populated by the compiler.</param>
            <param name="lineNumber">
            The line number of the call origin.
            Automatically populated by the compiler.</param>
        </member>
        <member name="M:Codon.Logging.ILog.Warn(System.String,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Int32)">
            <summary>
            Writes a log entry 
            at the <see cref="F:Codon.Logging.LogLevel.Warn"/> level.
            The log entry is not processed if the minimum log level
            is greater than the warn level.
            </summary>
            <param name="message">The message to be written to the log.</param>
            <param name="exception">An exception to be written to the log. 
            (Can be null)</param>
            <param name="properties">A dictionary of properties 
            that may be leveraged by the <c>ILog</c> implementation.</param>
            <param name="memberName">
            The class member name of the call origin.
            Automatically populated by the compiler.</param>
            <param name="filePath">
            The file path of the call origin.
            Automatically populated by the compiler.</param>
            <param name="lineNumber">
            The line number of the call origin.
            Automatically populated by the compiler.</param>
        </member>
        <member name="M:Codon.Logging.ILog.Error(System.String,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Int32)">
            <summary>
            Writes a log entry 
            at the <see cref="F:Codon.Logging.LogLevel.Error"/> level.
            The log entry is not processed if the minimum log level
            is greater than the error level.
            </summary>
            <param name="message">The message to be written to the log.</param>
            <param name="exception">An exception to be written to the log. 
            (Can be null)</param>
            <param name="properties">A dictionary of properties 
            that may be leveraged by the <c>ILog</c> implementation.</param>
            <param name="memberName">
            The class member name of the call origin.
            Automatically populated by the compiler.</param>
            <param name="filePath">
            The file path of the call origin.
            Automatically populated by the compiler.</param>
            <param name="lineNumber">
            The line number of the call origin.
            Automatically populated by the compiler.</param>
        </member>
        <member name="M:Codon.Logging.ILog.Fatal(System.String,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Int32)">
            <summary>
            Writes a log entry 
            at the <see cref="F:Codon.Logging.LogLevel.Fatal"/> level.
            The log entry is not processed if the minimum log level
            is equal to <see cref="F:Codon.Logging.LogLevel.None"/>.
            </summary>
            <param name="message">The message to be written to the log.</param>
            <param name="exception">An exception to be written to the log. 
            (Can be null)</param>
            <param name="properties">A dictionary of properties 
            that may be leveraged by the <c>ILog</c> implementation.</param>
            <param name="memberName">
            The class member name of the call origin.
            Automatically populated by the compiler.</param>
            <param name="filePath">
            The file path of the call origin.
            Automatically populated by the compiler.</param>
            <param name="lineNumber">
            The line number of the call origin.
            Automatically populated by the compiler.</param>
        </member>
        <member name="P:Codon.Logging.ILog.TraceEnabled">
            <summary>
            Return <c>true</c> is a request to write 
            a log entry at the <see cref="F:Codon.Logging.LogLevel.Trace"/>
            would succeed; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:Codon.Logging.ILog.DebugEnabled">
            <summary>
            Return <c>true</c> is a request to write 
            a log entry at the <see cref="F:Codon.Logging.LogLevel.Debug"/>
            would succeed; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:Codon.Logging.ILog.InfoEnabled">
            <summary>
            Return <c>true</c> is a request to write 
            a log entry at the <see cref="F:Codon.Logging.LogLevel.Info"/>
            would succeed; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:Codon.Logging.ILog.WarnEnabled">
            <summary>
            Return <c>true</c> is a request to write 
            a log entry at the <see cref="F:Codon.Logging.LogLevel.Warn"/>
            would succeed; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:Codon.Logging.ILog.ErrorEnabled">
            <summary>
            Return <c>true</c> is a request to write 
            a log entry at the <see cref="F:Codon.Logging.LogLevel.Error"/>
            would succeed; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:Codon.Logging.ILog.FatalEnabled">
            <summary>
            Return <c>true</c> is a request to write 
            a log entry at the <see cref="F:Codon.Logging.LogLevel.Fatal"/>
            would succeed; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="T:Codon.Logging.LogBase">
            <summary>
            Base implementation of the <see cref="T:Codon.Logging.ILog"/> interface.
            To create a custom <c>ILog</c> implementation,
            derive from this class and implement 
            the abstract <see cref="M:Codon.Logging.LogBase.WriteAsync(Codon.Logging.LogLevel,System.String,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:Codon.Logging.LogBase.WriteAsync(Codon.Logging.LogLevel,System.String,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Int32)">
            <summary>
            Writes a message to the log. 
            This is the usual override point for an implementation of an <c>ILog</c> implementation.
            </summary>
            <param name="logLevel">Is used by filters to decide whether to process the message.</param>
            <param name="message">The textual content of the entry.</param>
            <param name="exception">Can be null.</param>
            <param name="properties">Can be null. A optional list of properties 
            that may (or may not) be used by a particular <c>ILog</c> implementation.</param>
            <param name="memberName">The current member.</param>
            <param name="filePath">The name of the file.</param>
            <param name="lineNumber">The originating line number.</param>
        </member>
        <member name="T:Codon.Logging.Loggers.DebugLog">
            <summary>
            This is an implementation of the <see cref="T:Codon.Logging.ILog"/>
            that writes log messages 
            to the <c>System.Diagnostics.Debug</c> class.
            </summary>
        </member>
        <member name="T:Codon.Logging.Loggers.LocalStorageLog">
            <summary>
            An implementation of <see cref="T:Codon.Logging.ILog"/>
            that writes messages to a file located in isolated storage.
            Currently incompatible with WPF.
            </summary>
        </member>
        <member name="P:Codon.Logging.Loggers.LocalStorageLog.WriteToConsoleAsWell">
            <summary>
            Gets or sets a value indicating that log messages
            should also be written to the console.
            </summary>
        </member>
        <member name="P:Codon.Logging.Loggers.LocalStorageLog.LogFileName">
            <summary>
            The name of the file in isolated storage.
            Default is "log.txt".
            </summary>
        </member>
        <member name="P:Codon.Logging.Loggers.LocalStorageLog.LogFileSizeMaxKB">
            <summary>
            This value indicates at what size to clear the log and begin a new log file.
            Default is 1024 x 1024 (1 MB).
            </summary>
        </member>
        <member name="M:Codon.Logging.Loggers.LocalStorageLog.WriteToFile(System.String)">
            <summary>
            Writes a line to the current log file.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Codon.Logging.LogLevel">
            <summary>
            Indicates the level at which to write a log entry.
            Are used to exclude log entries that have log levels
            less than the current threshold level.
            </summary>
        </member>
        <member name="F:Codon.Logging.LogLevel.All">
            <summary>
            The least restrictive level.
            </summary>
        </member>
        <member name="F:Codon.Logging.LogLevel.Trace">
            <summary>
            For debugging purposes. More verbose than the Debug level.
            </summary>
        </member>
        <member name="F:Codon.Logging.LogLevel.Debug">
            <summary>
            For debugging purposes. More verbose than the Info level 
            and less verbose than the Trace level.
            </summary>
        </member>
        <member name="F:Codon.Logging.LogLevel.Info">
            <summary>
            Signifies verbose information. More verbose than the Warn level 
            and less verbose than the Debug level.
            </summary>
        </member>
        <member name="F:Codon.Logging.LogLevel.Warn">
            <summary>
            Signifies a warning from e.g. an unexpected event.
            </summary>
        </member>
        <member name="F:Codon.Logging.LogLevel.Error">
            <summary>
            When an application error occurs.
            </summary>
        </member>
        <member name="F:Codon.Logging.LogLevel.Fatal">
            <summary>
            When the application is no longer
            able to function or is in an unreliable state.
            Highly restrive logging.
            </summary>
        </member>
        <member name="F:Codon.Logging.LogLevel.None">
            <summary>
            Logging is disabled.
            </summary>
        </member>
        <member name="T:Codon.Logging.LogLevelExtensions">
            <summary>
            Extension methods for the <see cref="T:Codon.Logging.LogLevel"/> enum.
            </summary>
        </member>
        <member name="M:Codon.Logging.LogLevelExtensions.IsGreaterThanOrEqualTo(Codon.Logging.LogLevel,Codon.Logging.LogLevel)">
            <summary>
            Determines if the specified <c>LogLevel</c>
            is of a higher level. 
            </summary>
            <param name="logLevel">The current log level.</param>
            <param name="compareToLevel">A level to compare.</param>
            <returns><c>true</c> if the specified <c>LogLevel</c>
            is of a equal or higher level; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Codon.Logging.LogLevelExtensions.IsLessThanOrEqualTo(Codon.Logging.LogLevel,Codon.Logging.LogLevel)">
            <summary>
            Determines if the specified <c>LogLevel</c>
            is of a lesser level. 
            </summary>
            <param name="logLevel">The current log level.</param>
            <param name="compareToLevel">A level to compare.</param>
            <returns><c>true</c> if the specified <c>LogLevel</c>
            is of a lesser or equal level; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Codon.Messaging.IMessageSubscriber`1">
            <summary>
            Implement this interface on a class that needs
            to receive notifications from the <see cref="T:Codon.Services.IMessenger"/>.
            The generic type parameter is used to identify the type of message.
            When the <see cref="M:Codon.Services.IMessenger.PublishAsync``1(``0,System.Boolean,System.Type,System.String,System.String,System.Int32)"/>
            is called, all implementations 
            of <c>IMessageSubscriber&lt;TEvent&gt;</c> receives the message.
            Please note that a class must subscribe to receive message
            using the <see cref="M:Codon.Services.IMessenger.Subscribe(System.Object)"/> method.
            </summary>
            <typeparam name="TEvent">
            Used to identify the type of message.</typeparam>
        </member>
        <member name="M:Codon.Messaging.IMessageSubscriber`1.ReceiveMessageAsync(`0)">
            <summary>
            When the <see cref="M:Codon.Services.IMessenger.PublishAsync``1(``0,System.Boolean,System.Type,System.String,System.String,System.Int32)"/>
            is called, this method is called.
            </summary>
            <param name="message">The message payload.</param>
        </member>
        <member name="T:Codon.Messaging.CancellableMessageBase`1">
            <summary>
            This class is used as a base class for 
            cancellable messages.
            </summary>
            <typeparam name="TPayload">
            The type of data that accompanies the message
            when published.</typeparam>
        </member>
        <member name="M:Codon.Messaging.CancellableMessageBase`1.#ctor(System.Object,`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sender">
            The object that sent the message.</param>
            <param name="payload">
            An object containing message information.</param>
        </member>
        <member name="P:Codon.Messaging.CancellableMessageBase`1.Cancel">
            <summary>
            Allows the message to be cancelled
            so that other subscribers may see that
            it has been cancelled and not process the message.
            Note that setting this property to <c>true</c>
            does not prevent the message from being dispatched
            to other subscribers.
            Also not that, once set to <c>true</c>
            this property can not be set to <c>false</c>.
            </summary>
        </member>
        <member name="T:Codon.Messaging.MessageBase`1">
            <summary>
            The base class for a message that 
            supplies a single payload object 
            and has a known sender.
            </summary>
            <typeparam name="TPayload">
            The type of the payload, which accompanies 
            the message when it is published.</typeparam>
        </member>
        <member name="P:Codon.Messaging.MessageBase`1.Payload">
            <summary>
            Associated information that accompanies
            the message when it is published.
            </summary>
        </member>
        <member name="P:Codon.Messaging.MessageBase`1.Sender">
            <summary>
            The origin of the message.
            </summary>
        </member>
        <member name="M:Codon.Messaging.MessageBase`1.#ctor(System.Object,`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sender">
            The publisher of the message.</param>
            <param name="payload">
            Associated information that accompanies
            the message when it is published.
            Can be <c>null</c>.</param>
        </member>
        <member name="T:Codon.Messaging.ValueChangedMessageBase`1">
            <summary>
            The base class for a message informing subscribers
            that a value has changed.
            <seealso cref="T:Codon.Messaging.ValueChangingMessageBase`1"/>
            </summary>
            <typeparam name="TValue">
            The type of the value.</typeparam>
        </member>
        <member name="P:Codon.Messaging.ValueChangedMessageBase`1.OldValue">
            <summary>
            The value before the change occurred.
            </summary>
        </member>
        <member name="P:Codon.Messaging.ValueChangedMessageBase`1.NewValue">
            <summary>
            The value after the change.
            </summary>
        </member>
        <member name="P:Codon.Messaging.ValueChangedMessageBase`1.Sender">
            <summary>
            The originator of the change.
            </summary>
        </member>
        <member name="M:Codon.Messaging.ValueChangedMessageBase`1.#ctor(System.Object,`0,`0)">
            <summary>
            Initializes a new instance of <c>ValueChangedMessageBase</c>
            </summary>
            <param name="sender">
            Commonly this is the initiator of the message. 
            Cannot be <c>null</c>.</param>
            <param name="oldValue">The previous value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:Codon.Messaging.ValueChangingMessageBase`1">
            <summary>
            The base class for a message informing subscribers
            that a value is about to change.
            <seealso cref="T:Codon.Messaging.ValueChangedMessageBase`1"/>
            </summary>
            <typeparam name="TValue">
            The type of the value.</typeparam>
        </member>
        <member name="P:Codon.Messaging.ValueChangingMessageBase`1.CurrentValue">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="P:Codon.Messaging.ValueChangingMessageBase`1.NewValue">
            <summary>
            The value after the change occurs.
            </summary>
        </member>
        <member name="P:Codon.Messaging.ValueChangingMessageBase`1.Sender">
            <summary>
            The originator of the change.
            </summary>
        </member>
        <member name="M:Codon.Messaging.ValueChangingMessageBase`1.#ctor(System.Object,`0,`0)">
            <summary>
            Initializes a new instance of <c>ValueChangingMessageBase</c>
            </summary>
            <param name="sender">
            Commonly this is the initiator of the message. 
            Cannot be <c>null</c>.</param>
            <param name="currentValue">
            The current value.</param>
            <param name="newValue">
            What the new value will be if not cancelled.</param>
        </member>
        <member name="P:Codon.Messaging.ValueChangingMessageBase`1.Cancel">
            <summary>
            Allows the message to be cancelled
            so that other subscribers may see that
            it has been cancelled and not process the message.
            Note that setting this property to <c>true</c>
            does not prevent the message from being dispatched
            to other subscribers.
            Also not that, once set to <c>true</c>
            this property can not be set to <c>false</c>.
            </summary>
        </member>
        <member name="T:Codon.Messaging.Messenger">
            <summary>
            Default implementation of the <see cref="T:Codon.Services.IMessenger"/> interface.
            See the <see cref="T:Codon.Services.IMessenger"/> interface for
            API documentation.
            </summary>
        </member>
        <member name="P:Codon.Messaging.Messenger.ExceptionHandler">
            <summary>
            When an exception occurs during execution or during evaluating 
            if the command can execute, then the exception is passed to the exception manager.
            If <c>null</c> the IoC container is used to locate an instance.
            </summary>
        </member>
        <member name="F:Codon.MissingTypes.System.ComponentModel.CancelEventArgs.cancel">
            <summary>
            Indicates, on return, whether or not the operation should be cancelled
                or not.  'true' means cancel it, 'false' means don't. 
            </summary>
        </member>
        <member name="P:Codon.MissingTypes.System.ComponentModel.CancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether 
            the operation should be cancelled. 
            </summary>
        </member>
        <member name="T:Codon.MissingTypes.System.Windows.Data.IValueConverter">
            <summary>
            Converts a value, normally supplied via a data binding,
            to another value. This interface corresponds to the
            <c>IValueConverter</c> that exists in UWP and WPF.
            This interface is present in this library and not
            in a platform specific library due to the dependence
            on it by the UI.Data library and the Framework platform
            libraries.
            </summary>
        </member>
        <member name="T:Codon.MissingTypes.System.Windows.Navigation.NavigatingCancelEventArgs">
            <summary>
            Placeholder class to for compatibility.
            </summary>
        </member>
        <member name="T:Codon.Navigation.INavigationAware">
            <summary>
            Classes implementing this interface are
            able to be notified when a navigation event
            occurs.
            </summary>
        </member>
        <member name="M:Codon.Navigation.INavigationAware.HandleNavigatedTo(Codon.Navigation.NavigatedArgs)">
            <summary>
            Called when the class is navigated to.
            </summary>
            <param name="e">
            Arguments containing information about the navigation.
            </param>
        </member>
        <member name="M:Codon.Navigation.INavigationAware.HandleNavigatingFrom(Codon.Navigation.NavigatingArgs)">
            <summary>
            Called when the class is navigated away from.
            </summary>
            <param name="e">
            Arguments containing information about the navigation.
            If supported may allows cancellation of the navigation.
            </param>
        </member>
        <member name="T:Codon.Navigation.INavigationMonitor">
            <summary>
            Placeholder interface for a class that is tasked
            with monitoring page navigation within an app.
            </summary>
        </member>
        <member name="M:Codon.Navigation.INavigationMonitor.Initialize">
            <summary>
            Commences monitoring the app for navigation 
            events.
            </summary>
        </member>
        <member name="T:Codon.Navigation.NavigatedMessage">
            <summary>
            This message is dispatched when a navigation event
            occurs. Ordinarily this is when the app 
            transitions to a new page or activity.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatedMessage.Args">
            <summary>
            An object that provides further information
            regarding the navigation.
            </summary>
        </member>
        <member name="T:Codon.Navigation.NavigatingMessage">
            <summary>
            This message is dispatched when a navigation event
            is about to occur. Ordinarily this is when the app 
            is transitioning to a new page or activity.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatingMessage.Args">
            <summary>
            An object that provides further information
            regarding the navigation and allows the cancellation
            of the navigation.
            </summary>
        </member>
        <member name="T:Codon.Navigation.NavigatedArgs">
            <summary>
            Informs of a navigation event.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatedArgs.Content">
            <summary>
            The destination page.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatedArgs.Uri">
            <summary>
            Gets the destination.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatedArgs.PageType">
            <summary>
            The type of the page that was navigated to.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatedArgs.NavigationType">
            <summary>
            Indicates whether the navigation is a new page,
            a back navigation or so forth.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatedArgs.IsNavigationInitiator">
            <summary>
            If <c>true</c> this property indicates 
            that the application caused the navigation.
            If <c>false</c> then the operating system 
            caused the navigation, which is indicative
            of a navigation to a location outside the app;
            such as the homescreen or another app. 
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatedArgs.Parameter">
            <summary>
            A parameter that is sent to the destination.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatedArgs.BuiltInArgs">
            <summary>
            The built in event args. May be <c>null</c>.
            </summary>
        </member>
        <member name="T:Codon.Navigation.NavigatingArgs">
            <summary>
            Informs of, and allows cancellation of, 
            a navigation event.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatingArgs.Uri">
            <summary>
            Gets the destination.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatingArgs.NavigationType">
            <summary>
            Indicates whether the navigation is a new page,
            a back navigation or so forth.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatingArgs.Cancellable">
            <summary>
            If <c>true</c> then a receiver may cancel
            the navigation. If <c>false</c> the navigation
            is cannot be cancelled.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatingArgs.IsNavigationInitiator">
            <summary>
            If <c>true</c> this property indicates 
            that the application caused the navigation.
            If <c>false</c> then the operating system 
            caused the navigation, which is indicative
            of a navigation to a location outside the app;
            such as the homescreen or another app. 
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatingArgs.Parameter">
            <summary>
            A parameter that is sent to the destination.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatingArgs.Cancel">
            <summary>
            If supported, cancels the navigation.
            <seealso cref="P:Codon.Navigation.NavigatingArgs.Cancellable"/> 
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatingArgs.BuiltInArgs">
            <summary>
            The built in event args. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatingArgs.TargetPageType">
            <summary>
            The target page of the navigation.
            The page type that is being navigated to.
            May be <c>null</c>.
            <seealso cref="P:Codon.Navigation.NavigatingArgs.Uri"/>
            </summary>
        </member>
        <member name="T:Codon.Navigation.NavigatingFromEventArgs">
            <summary>
            Arguments used in conjunction with the 
            <see cref="M:Codon.Navigation.INavigationAware.HandleNavigatingFrom(Codon.Navigation.NavigatingArgs)"/> event.
            </summary>
        </member>
        <member name="P:Codon.Navigation.NavigatingFromEventArgs.Uri">
            <summary>
            The destination <c>Uri</c>.
            </summary>
        </member>
        <member name="T:Codon.Navigation.NavigationType">
            <summary>
            Indicates the type of navigation.
            </summary>
        </member>
        <member name="T:Codon.Navigation.IRoutingService">
            <summary>
            Associates URLs with <c>Action</c>s that
            are used by the <see cref="T:Codon.Services.INavigationService"/>
            implementation. When a URL is requested via the 
            <see cref="T:Codon.Services.INavigationService"/>,
            the routing services retrieves the associated action
            and invokes the action.
            </summary>
        </member>
        <member name="M:Codon.Navigation.IRoutingService.RegisterPath(System.String,System.Action)">
            <summary>
            Associates a URL with a navigation action.
            When the <see cref="T:Codon.Services.INavigationService"/>
            receives a request to navigate to a URL,
            the routing service retrieves the associated
            navigation action and the action is invoked. 
            </summary>
            <param name="url">The URL of the action.</param>
            <param name="navigationAction">
            The action to associate with the URL.</param>
        </member>
        <member name="T:Codon.Navigation.RoutingService">
            <summary>
            This class is used for Android, iOS, or any other platform 
            that doesn't adhere to a navigation model using either a URI or Type.
            </summary>
        </member>
        <member name="T:Codon.Platform.PlatformDetector">
            <summary>
            .NET Standard currently does not provide
            a straight forward way to determine the platform
            that it is running on. This class probes 
            for a well-known type in platform specific assemblies
            to determine the platform. This then allows
            the <c>FrameworkContainer</c> IoC container 
            to automatically locate platform specific types
            at run-time.
            </summary>
        </member>
        <member name="T:Codon.Reflection.AssemblyBuildTime">
            <summary>
            This class allows you to retrieve a version number based 
            on the build time of a specified assembly.
            </summary>
        </member>
        <member name="M:Codon.Reflection.AssemblyBuildTime.#ctor(System.Version)">
            <summary>
            Initializes a new <c>AssemblyBuildTime</c> object 
            using the specified version.
            Assembly version must be defined using a wildcard. 
            E.g. [assembly: AssemblyVersion(\"1.0.*\")]
            The build time is able to be determined because 
            the algorithm for generating a version from a wildcard 
            is known.
            </summary>
            <param name="assemblyVersion">
            The assembly version for which to retrieve the build time.</param>
            <example>
            var assembly = Assembly.GetExecutingAssembly();
            var buildTime = new AssemblyBuildTime(assembly.GetName().Version);
            </example>
            <exception cref="T:System.ArgumentException">
            Is thrown if the <c>Build</c> and <c>Revision</c>
            values of the <paramref name="assemblyVersion"/> are both 0;
            indicating that the assembly does not use a wildcard pattern.
            </exception>
        </member>
        <member name="M:Codon.Reflection.AssemblyBuildTime.GenerateDisplayVersion(System.Boolean)">
            <summary>
            Creates a version number with the embedded date 
            and time of build. 
            For example "1.0.03281433", which reflects the format
            to {MajorVersion}.{MinorVersion}.{Month}{Day}{Hour}{Minute},
            and corresponds to 28 March 2.33pm.
            </summary>
            <param name="includeYearInDisplayVersion">
            If <c>true</c> includes a two digit year value 
            in the <c>DisplayVersion</c>, which changes the format to:
            {MajorVersion}.{MinorVersion}.{Year}{Month}{Day}{Hour}{Minute}</param>
            <returns></returns>
        </member>
        <member name="T:Codon.Reflection.AssemblyExensions">
            <summary>
            Extension methods for <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Codon.Reflection.AssemblyExensions.GetBuildTime(System.Reflection.Assembly)">
            <summary>
            Retrieves the <c>AssemblyBuildTime</c> for the specified assembly.
            <see cref="T:Codon.Reflection.AssemblyBuildTime"/>
            </summary>
        </member>
        <member name="M:Codon.Reflection.AssemblyExensions.GetBuildTime(System.Version)">
            <summary>
            Retrieves the <c>AssemblyBuildTime</c> for the specified assembly version.
            <see cref="T:Codon.Reflection.AssemblyBuildTime"/>
            </summary>
        </member>
        <member name="T:Codon.Reflection.CachedTypeResolver">
            <summary>
            This class is intended to improve performance
            by caching types by their full names.
            </summary>
        </member>
        <member name="M:Codon.Reflection.CachedTypeResolver.GetType(System.String)">
            <summary>
            This method resolves a <c>Type</c> instance using Type.GetType. 
            Some type names in UWP are unresolvable when expressed with an assembly name. 
            Such as System.String, System.Private.CoreLib.
            If this method it is unable to resolve a type with an assembly name, it removes the assembly name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:Codon.Reflection.EnumToListConverter">
            <summary>
            This class allows you to convert an enum
            to a list of its values. This is useful,
            for example, if you wish to bind an enum 
            to a drop down list.
            </summary>
        </member>
        <member name="T:Codon.Reflection.IReflectionCache">
            <summary>
            A reflection cache is used to create and cache
            delegates that can retrieve or set the
            value of a property; or call a method.
            Using the cache can dramatically improve performance 
            in some cases.
            </summary>
        </member>
        <member name="M:Codon.Reflection.IReflectionCache.GetVoidMethodInvoker(System.Reflection.MethodInfo)">
            <summary>
            Retrieve or create an action that can be used
            to call a method on a object.
            </summary>
            <param name="methodInfo">
            The method info for the method you wish to call.
            If the method you wish to call has a non-null
            return type, use <see cref="M:Codon.Reflection.IReflectionCache.GetMethodInvoker(System.Reflection.MethodInfo)"/> instead.
            </param>
            <returns>An action that can be used to
            call the method. The first argument is the instance
            on which the method exists. The <c>object[]</c>
            contains the arguments for the call.</returns>
        </member>
        <member name="M:Codon.Reflection.IReflectionCache.GetMethodInvoker(System.Reflection.MethodInfo)">
            <summary>
            Retrieve or create a func that can be used
            to call a method on a object. This differs from
            the <seealso cref="M:Codon.Reflection.IReflectionCache.GetVoidMethodInvoker(System.Reflection.MethodInfo)"/> method
            in that it produces a func that returns the value
            from the target method. This method can be used
            in place of <see cref="M:Codon.Reflection.IReflectionCache.GetVoidMethodInvoker(System.Reflection.MethodInfo)"/>,
            however for methods that have a void return type,
            <c>null</c> is returned.
            </summary>
            <param name="methodInfo">
            The method info for the method you wish to call.
            </param>
            <returns>A func that can be used to
            call the method. The first argument is the instance
            on which the method exists. The <c>object[]</c>
            contains the arguments for the call.
            The last return argument is the result of the method call.
            If the method has a void return type, then <c>null</c>
            is always returned.</returns>
        </member>
        <member name="M:Codon.Reflection.IReflectionCache.GetMethodInvoker``1(System.Reflection.MethodInfo)">
            <summary>
            Retrieve or create a func that can be used
            to call a method on a object. This differs from
            the <seealso cref="M:Codon.Reflection.IReflectionCache.GetVoidMethodInvoker(System.Reflection.MethodInfo)"/> method
            in that it produces a func that returns the value
            from the target method. This method can be used
            in place of <see cref="M:Codon.Reflection.IReflectionCache.GetVoidMethodInvoker(System.Reflection.MethodInfo)"/>,
            however for methods that have a void return type,
            <c>null</c> is returned.
            </summary>
            <param name="methodInfo">
            The method info for the method you wish to call.
            </param>
            <typeparam name="TReturn">
            The return type of the method to invoke.</typeparam>
            <returns>A func that can be used to
            call the method. The first argument is the instance
            on which the method exists. The <c>object[]</c>
            contains the arguments for the call.
            The last return argument is the result of the method call.
            If the method has a void return type, then <c>null</c>
            is always returned.</returns>
        </member>
        <member name="M:Codon.Reflection.IReflectionCache.GetPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Retrieves or creates an func that can be used
            to retrieve the value of a property.
            </summary>
            <param name="propertyInfo">
            The property info instance for the property.</param>
            <returns>A func that can be used to
            retrieve the property value. 
            The argument is the instance
            on which the property exists.</returns>
        </member>
        <member name="M:Codon.Reflection.IReflectionCache.GetPropertyGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Retrieves or creates an func that can be used
            to retrieve the value of a property.
            </summary>
            <param name="propertyInfo">
            The property info instance for the property.</param>
            <typeparam name="TProperty">
            The property type.
            </typeparam>
            <returns>A func that can be used to
            retrieve the property value. 
            The argument is the instance
            on which the property exists.</returns>
        </member>
        <member name="M:Codon.Reflection.IReflectionCache.GetPropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            Retrieve or create an action that can be used
            to set the value of a property.
            </summary>
            <param name="propertyInfo">
            The property info instance for the property.</param>
            <returns>An action that can be used to
            set the property value. 
            The first argument is the instance
            on which the property exists.
            The second argument is new property value.</returns>
        </member>
        <member name="M:Codon.Reflection.IReflectionCache.GetPropertySetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Retrieve or create an action that can be used
            to set the value of a property.
            </summary>
            <param name="propertyInfo">
            The property info instance for the property.</param>
            <typeparam name="TProperty">
            The property type.</typeparam>
            <returns>An action that can be used to
            set the property value. 
            The first argument is the instance
            on which the property exists.
            The second argument is new property value.</returns>
        </member>
        <member name="M:Codon.Reflection.IReflectionCache.Clear">
            <summary>
            Removes all cached values.
            </summary>
        </member>
        <member name="T:Codon.Reflection.ReflectionCache">
            <summary>
            Default implementation of the 
            <see cref="T:Codon.Reflection.IReflectionCache"/> interface.
            See the interface for API documentation.
            </summary>
        </member>
        <member name="T:Codon.Reflection.ReflectionCompiler">
            <summary>
            This class creates delegates to call methods
            and retrieve and set property values.
            Its purpose is to improve an applications 
            performance by reducing the use of reflection.
            </summary>
        </member>
        <member name="M:Codon.Reflection.ReflectionCompiler.CreateMethodAction(System.Reflection.MethodInfo)">
            <summary>
            Create an action that can be used
            to call a method on a object.
            </summary>
            <param name="methodInfo">
            The method info for the method you wish to call.
            </param>
            <returns>An action that can be used to
            call the method. The first argument is the instance
            on which the method exists. The <c>object[]</c>
            contains the arguments for the call.</returns>
        </member>
        <member name="M:Codon.Reflection.ReflectionCompiler.CreateMethodFunc(System.Reflection.MethodInfo)">
            <summary>
            Create a func that can be used
            to call a method on a object.
            </summary>
            <param name="methodInfo">
            The method info of the method you wish to call.
            </param>
            <returns>A func that can be used to
            call the method. The first argument is the instance
            on which the method exists. The <c>object[]</c>
            contains the arguments for the call.
            The last return argument is the result of the method call.
            If the method has a void return type, then <c>null</c>
            is always returned.</returns>
        </member>
        <member name="M:Codon.Reflection.ReflectionCompiler.CreateMethodFunc``1(System.Reflection.MethodInfo)">
            <summary>
            Create a func that can be used
            to call a method on a object.
            </summary>
            <param name="methodInfo">
            The method info of the method you wish to call.
            </param>
            <typeparam name="TReturn">
            The return type of the method to invoke.</typeparam>
            <returns>A func that can be used to
            call the method. The first argument is the instance
            on which the method exists. The <c>object[]</c>
            contains the arguments for the call.
            The last return argument is the result of the method call.
            If the method has a void return type, then <c>null</c>
            is always returned.</returns>
        </member>
        <member name="M:Codon.Reflection.ReflectionCompiler.CreateGetter``1(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a getter func for the specified 
            property info instance.
            Using a func to get the value of the property
            is faster than using reflection each time.
            </summary>
            <typeparam name="TProperty">
            The type of the property.</typeparam>
            <param name="propertyInfo">
            The property info instance for the property.
            </param>
            <param name="owner">
            The object that owns the property.</param>
            <returns>A func that can be called get
            the value of the property.</returns>
        </member>
        <member name="M:Codon.Reflection.ReflectionCompiler.CreateGetterDelegate``1(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a delegate that can be used to retrieve
            the value of a property.
            </summary>
            <typeparam name="TDelegate">
            The delgate type.</typeparam>
            <param name="propertyInfo">
            A property info instance.</param>
            <param name="owner">The owner of the property.</param>
            <returns>A delegate that can be invoked
            to retrieve the value of the property.</returns>
        </member>
        <member name="M:Codon.Reflection.ReflectionCompiler.CreateSetter``1(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a setter func for the specified 
            property info instance.
            Using a func to set the value of the property
            is faster than using reflection each time.
            </summary>
            <typeparam name="TProperty">
            The type of the property.</typeparam>
            <param name="propertyInfo">
            The property info instance for the property.
            </param>
            <param name="owner">
            The object that owns the property.</param>
            <returns>A func that can be called set
            the value of the property.</returns>
        </member>
        <member name="M:Codon.Reflection.ReflectionCompiler.GetPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Retrieves the property info object for the specified expression.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="expression">An expression that 
            retrieves the property value. For example: () => MyProperty</param>
            <returns>The property info instance for the property.</returns>
        </member>
        <member name="M:Codon.Reflection.ReflectionCompiler.CreateEventHandler(System.Reflection.EventInfo,System.Action)">
            <summary>
            Creates a handler for the specified event,
            so that when the event is raised, the specified
            action is invoked.
            </summary>
            <param name="eventInfo">The event.</param>
            <param name="action">
            The action to invoke when the event is raised.</param>
            <returns>A delegate that can be used 
            to subscribe to the event.</returns>
            <example>
            var handler = ReflectionCompiler.CreateEventHandler(eventInfo, ExecuteCommand);
            eventInfo.AddEventHandler(element, handler);
            </example>
        </member>
        <member name="T:Codon.ResourcesModel.StringParserService">
            <summary>
            Default implementation of the <see cref="T:Codon.Services.IStringParserService"/>.
            This class allows the replacement of 'tags', 
            which are sections within strings having the format: 
            ${TagName[:Argument]} 
            where [:Argument] is optional.
            You can register a tag with its replacement text,
            or you can register an <see cref="T:Codon.ComponentModel.IConverter"/>
            that is used to replace the text.
            </summary>
        </member>
        <member name="T:Codon.SettingsModel.BindableSettingResolver">
            <summary>
            This class allows you to bind indirectly 
            to the <see cref="T:Codon.Services.ISettingsService"/> implementation.
            This class raises a property changed event when
            a setting changes.
            </summary>
        </member>
        <member name="P:Codon.SettingsModel.BindableSettingResolver.Item(System.String)">
            <summary>
            Use an indexer to resolve a property value.
            </summary>
            <param name="key">
            The property key.</param>
            <returns>
            The value of the property with the specified key.
            </returns>
        </member>
        <member name="T:Codon.SettingsModel.SettingsStoreStatus">
            <summary>
            Indicates the availability of an <see cref="T:Codon.SettingsModel.ISettingsStore"/>.
            </summary>
        </member>
        <member name="F:Codon.SettingsModel.SettingsStoreStatus.Ready">
            <summary>
            The settings store is able to save and restore settings.
            </summary>
        </member>
        <member name="F:Codon.SettingsModel.SettingsStoreStatus.Unavailable">
            <summary>
            The settings store is not able to save and restore settings.
            This may be because the store is in the process of
            initialising.
            </summary>
        </member>
        <member name="T:Codon.SettingsModel.ISettingsStore">
            <summary>
            This interface the code contract for a class
            that is able to save and restore a keyed
            object collection.
            </summary>
        </member>
        <member name="M:Codon.SettingsModel.ISettingsStore.TryGetValue(System.String,System.Type,System.Object@)">
            <summary>
            Attempts to retrieve a value from the store
            using the specified item key.
            </summary>
            <param name="key">
            The unique key of the setting.</param>
            <param name="settingType">
            The type of the setting.
            This is used to convert a serialized
            object back to its original form.</param>
            <param name="value">The resulting setting.</param>
            <returns><c>true</c> if the setting is located;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Codon.SettingsModel.ISettingsStore.Contains(System.String)">
            <summary>
            Deterimes if a setting with the specified
            key exists in the store.
            </summary>
            <param name="key">The unique setting key.</param>
            <returns><c>true</c> if the setting is located;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Codon.SettingsModel.ISettingsStore.Remove(System.String)">
            <summary>
            Remove the setting with the specified key
            from the store.
            </summary>
            <param name="key">The unique setting key.</param>
            <returns><c>true</c> if the setting is located
            and removed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Codon.SettingsModel.ISettingsStore.ClearAsync">
            <summary>
            Removes all settings from the store.
            </summary>
        </member>
        <member name="M:Codon.SettingsModel.ISettingsStore.SaveAsync">
            <summary>
            Requests that all settings be persisted
            immediately
            </summary>
        </member>
        <member name="P:Codon.SettingsModel.ISettingsStore.Item(System.String)">
            <summary>
            Gets the settings value for the specified
            setting key.
            </summary>
            <param name="key">The unique setting key.</param>
            <returns>
            The setting value, or <c>null</c>
            if a setting is not found.</returns>
        </member>
        <member name="P:Codon.SettingsModel.ISettingsStore.Status">
            <summary>
            Indicates the current state of the store.
            <see cref="T:Codon.SettingsModel.SettingsStoreStatus"/>
            </summary>
        </member>
        <member name="T:Codon.SettingsModel.IsolatedStorageSettings">
            <summary>
            This class is used to persist and dictionary
            of keyed setting value to isolated store.
            It makes use of the <seealso cref="T:Codon.IO.IBinarySerializer"/>
            to serialize the dictionary.
            This class makes use of the <see cref="T:Codon.ComponentModel.IExceptionHandler"/>
            implementation. If an exception is thrown during
            deserialization, then the exception
            handler instance is used to determine if the exception
            should be rethrown. <seealso cref="T:Codon.ComponentModel.ExceptionHandlers.LoggingExceptionHandler"/>
            </summary>
        </member>
        <member name="M:Codon.SettingsModel.IsolatedStorageSettings.Save">
            <summary>
            Persist the settings to isolated storage.
            </summary>
            <exception cref="T:Codon.InversionOfControl.ResolutionException">
            If an exception occurs while retrieving the binary
            serializer.</exception>
            <exception cref="T:System.Exception">
            If the serialization fails.</exception>
        </member>
        <member name="P:Codon.SettingsModel.IsolatedStorageSettings.ApplicationSettings">
            <summary>
            Obtains the user-scoped isolated storage settings
            corresponding to the calling code's application identity.
            </summary>
        </member>
        <member name="M:Codon.SettingsModel.IsolatedStorageSettings.TryGetValue``1(System.String,``0@)">
            <summary>
            Attempts to retrieve the setting
            with the specified unique key.
            </summary>
            <typeparam name="TSetting">
            The type of the setting.</typeparam>
            <param name="key">
            The unique key of the setting.</param>
            <param name="value">
            The resulting value if located.</param>
            <returns><c>true</c> if the setting is retrieved;
            <c>false</c> otherwise.</returns>
            <exception cref="T:System.InvalidCastException">
            Thrown if the <c>TSetting</c> does not
            correspond to the actual setting value.</exception>
        </member>
        <member name="T:Codon.SettingsModel.NamespaceDoc">
            <summary>
            The <see cref="N:Codon.SettingsModel"/> namespace contains types
            that support storing and retrieving persistable application state settings.
            </summary>
        </member>
        <member name="T:Codon.SettingsModel.SerializableSetting">
            <summary>
            This class allows you to convert a setting value 
            to an XML representation, which is useful for exporting
            or importing settings. 
            When converting to XML, the setting value is converted 
            to a <c>byte[]</c> and then to a Base 64 string representation.
            The Base 64 string is placed into an 
            XML element.
            <seealso cref="P:Codon.SettingsModel.SerializableSetting.StorageLocation"/>
            </summary>
        </member>
        <member name="P:Codon.SettingsModel.SerializableSetting.Name">
            <summary>
            Gets or sets the unique name of the setting.
            </summary>
        </member>
        <member name="P:Codon.SettingsModel.SerializableSetting.StorageLocation">
            <summary>
            Gets or sets where the setting resides.
            </summary>
        </member>
        <member name="P:Codon.SettingsModel.SerializableSetting.SettingValue">
            <summary>
            Gets or sets the setting value.
            </summary>
        </member>
        <member name="T:Codon.SettingsModel.SerializationContants">
            <summary>
            This class contains constants that are used
            for serializing objects.
            </summary>
        </member>
        <member name="T:Codon.SettingsModel.SettingChangeEventArgs">
            <summary>
            This class is the <c>EventArgs</c> for the 
            <see cref="E:Codon.Services.ISettingsService.SettingChanged"/> event.
            </summary>
        </member>
        <member name="P:Codon.SettingsModel.SettingChangeEventArgs.SettingName">
            <summary>
            Gets or sets the name of the setting.
            </summary>
            <value>The name of the setting.</value>
        </member>
        <member name="P:Codon.SettingsModel.SettingChangeEventArgs.SettingValue">
            <summary>
            Gets or sets the setting value.
            </summary>
            <value>The setting value.</value>
        </member>
        <member name="M:Codon.SettingsModel.SettingChangeEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Codon.SettingsModel.SettingChangeEventArgs"/> class.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <param name="settingValue">The setting value.</param>
        </member>
        <member name="T:Codon.SettingsModel.SettingChangingEventArgs">
            <summary>
            This class is the <c>EventArgs</c> for the 
            <see cref="E:Codon.Services.ISettingsService.SettingChanging"/> event.
            </summary>
        </member>
        <member name="P:Codon.SettingsModel.SettingChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether 
            this <see cref="T:Codon.SettingsModel.SettingChangingEventArgs"/> has been canceled.
            Can only be set to <c>true</c>.
            </summary>
            <value><c>true</c> if this instance's Cancel property 
            was set to <c>true</c>; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Codon.SettingsModel.SettingChangingEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Codon.SettingsModel.SettingChangingEventArgs"/> class.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <param name="settingValue">The setting value.</param>
        </member>
        <member name="T:Codon.SettingsModel.SettingsEventBroadcaster">
            <summary>
            This class monitors the <see cref="T:Codon.Services.ISettingsService"/>
            implementation for setting changes. When a change occurs,
            it broadcasts a message using the <see cref="T:Codon.Services.IMessenger"/>.
            </summary>
        </member>
        <member name="T:Codon.SettingsModel.SetSettingResult">
            <summary>
            Indicates the result of SetSetting call in the <see cref="T:Codon.Services.ISettingsService"/>.
            </summary>
        </member>
        <member name="F:Codon.SettingsModel.SetSettingResult.Successful">
            <summary>
            The setting was changed.
            </summary>
        </member>
        <member name="F:Codon.SettingsModel.SetSettingResult.Cancelled">
            <summary>
            Occurs when a subscriber to the SettingChangedEvent cancels the change.
            </summary>
        </member>
        <member name="T:Codon.SettingsModel.SettingsService">
            <summary>
            This is the default implementation of the
            <see cref="T:Codon.Services.ISettingsService"/>.
            To change where the service stores and retrieves its values,
            provide a custom <c>ISettingsStore</c> implementation.
            </summary>
        </member>
        <member name="F:Codon.SettingsModel.SettingsService.settingsLockSlim">
            <summary>
            Provides thread safety for the dictionary of settings.
            </summary>
        </member>
        <member name="T:Codon.SettingsModel.InMemoryTransientSettingsStore">
            <summary>
            Rudimentary implementation of an <c>ISettingsStore</c> 
            for storing data that should be discarded 
            when the application exits.
            </summary>
        </member>
        <member name="T:Codon.SettingsModel.LocalSettingsStore">
            <summary>
            Default implementation of the <see cref="T:Codon.SettingsModel.ISettingsStore"/>
            interface, which uses isolated storage to persist 
            and restore settings.
            </summary>
        </member>
        <member name="T:Codon.SettingsModel.StorageLocation">
            <summary>
            This enum is used to specify where a setting is stored.
            </summary>
        </member>
        <member name="F:Codon.SettingsModel.StorageLocation.Local">
            <summary>
            Stored within the applications local storage.
            </summary>
        </member>
        <member name="F:Codon.SettingsModel.StorageLocation.Roaming">
            <summary>
            Stored in roaming storage associated with the user's account.
            </summary>
        </member>
        <member name="F:Codon.SettingsModel.StorageLocation.Transient">
            <summary>
            Persists only for a single launch/exit cycle.
            </summary>
        </member>
        <member name="T:Codon.StatePreservation.ITransientState">
            <summary>
            Transient state is used to persist an application's
            state, which should not persist across an application
            exit/start cycle. It may be persisted if the application
            is tombstoned.
            </summary>
        </member>
        <member name="P:Codon.StatePreservation.ITransientState.StateDictionary">
            <summary>
            A dictionary of keyed state values.
            </summary>
        </member>
        <member name="M:Codon.StatePreservation.ITransientState.LoadAsync">
            <summary>
            Load state from transient storage. When calling this
            method the instance should initialize its
            state dictionary. See the <c>TransientState</c>
            UWP implementation for example. It saves and loads
            its state from local storage.
            </summary>
        </member>
        <member name="M:Codon.StatePreservation.ITransientState.SaveAsync">
            <summary>
            Save state to transient storage. When calling this
            method the instance should initialize its
            state dictionary. See the <c>TransientState</c>
            UWP implementation for example. It saves and loads
            its state from local storage.
            </summary>
        </member>
        <member name="M:Codon.StatePreservation.ITransientState.Clear">
            <summary>
            Clear the state dictionary 
            and remove it from transient storage.
            </summary>
        </member>
        <member name="T:Codon.UIModel.ICompositeViewModel">
            <summary>
            A class that implements this interface owns 0 or more
            child view-models. It is the task of the composite
            view-model to propagate events to children.
            </summary>
        </member>
        <member name="P:Codon.UIModel.ICompositeViewModel.ChildViewModels">
            <summary>
            The collection of child view models.
            </summary>
        </member>
        <member name="M:Codon.UIModel.ICompositeViewModel.ActivateViewModel(Codon.UIModel.IViewModel)">
            <summary>
            Make the specified view-model the active
            view-model. For example, if the composite
            view-model represents a tabbed interface, and each
            child a tab, then the composite view-model
            would select the specified view-model to make
            it the visible tab.
            </summary>
            <param name="viewModel">
            The view-model to activate.
            </param>
        </member>
        <member name="T:Codon.UIModel.Input.CommandBase`1">
            <summary>
            The base implementation of the <see cref="T:Codon.UIModel.Input.ICommandBase"/>
            interface and is intended to be the base implementation
            for all commands.
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="P:Codon.UIModel.Input.CommandBase`1.DefaultParameter">
            <summary>
            This value is supplied to the <c>Execute</c>
            and <c>CanExecute</c> methods if no value is 
            specified when calling those methods.
            It's most useful in scenarious when binding
            does not support the notion of parameters. 
            </summary>
        </member>
        <member name="E:Codon.UIModel.Input.CommandBase`1.CanExecuteChanged">
            <summary>
            If subscribing to this event, ensure that you call 
            <c>CanExecute</c> or <c>CanExecuteAsync</c> method 
            when the event is raised;
            otherwise the <c>Enabled</c> property may not behave as expected.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.CommandBase`1.ExceptionHandler">
            <summary>
            When an exception occurs during execution or during evaluating 
            if the command can execute, then the exception is passed to the exception manager.
            If <c>null</c> the IoC container is used to locate an instance.
            </summary>
        </member>
        <member name="T:Codon.UIModel.Input.ActionCommand">
            <summary>
            A command that uses delegates to perform its action 
            and determine its enabled state. 
            </summary>
        </member>
        <member name="M:Codon.UIModel.Input.ActionCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean},System.String,System.Int32)">
            <summary>
            Creates a synchronous command. 
            </summary>
            <param name="executeAction">
            The action to invoke when the command is executed.</param>
            <param name="canExecuteFunc">
            A func that determines if the command 
            may be performed. Can be <c>null</c>.</param>
            <param name="filePath">
            The path to the file that is instantiating this class. 
            This should only be explicitly specified 
            by classes that subclass this class.</param>
            <param name="lineNumber">The line number of the file 
            that is instantiating this class. 
            This should only be explicitly specified 
            by classes that subclass this class.</param>
        </member>
        <member name="T:Codon.UIModel.Input.ActionCommand`1">
            <summary>
            A command that uses delegates to perform its action 
            and determine its enabled state. 
            </summary>
            <typeparam name="TParameter">The parameter type,
            which may be used when executing the command or
            evaluating if the command can execute.</typeparam>
        </member>
        <member name="M:Codon.UIModel.Input.ActionCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.String,System.Int32)">
            <summary>
            Creates a synchronous command. 
            </summary>
            <param name="executeAction">The action to invoke 
            when the command is executed.</param>
            <param name="canExecuteFunc">A func that determines if the command 
            may be executed. Can be <c>null</c>.</param>
            <param name="filePath">
            The path to the file that is instantiating this class. 
            This should only be explicitly specified 
            by classes that subclass this class.</param>
            <param name="lineNumber">The line number of the file 
            that is instantiating this class. 
            This should only be explicitly specified 
            by classes that subclass this class.</param>
        </member>
        <member name="T:Codon.UIModel.Input.UICommand">
            <summary>
            A command that includes various auxiliary properties
            such as <c>Text</c> and <c>Visibility</c>, 
            and that uses delegates to perform its action 
            and determine if its action can be performed. 
            </summary>
        </member>
        <member name="M:Codon.UIModel.Input.UICommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean},System.String,System.Int32)">
            <summary>
            Creates a synchronous UI command. 
            </summary>
            <param name="executeAction">
            The action to invoke when the command is executed.</param>
            <param name="canExecuteFunc">
            A func that determines if the command 
            may be performed. Can be <c>null</c>.</param>
            <param name="filePath">
            The path to the file that is instantiating this class. 
            This should only be explicitly specified 
            by classes that subclass this class.</param>
            <param name="lineNumber">
            The line number of the file that is instantiating this class. 
            This should only be explicitly specified 
            by classes that subclass this class.</param>
        </member>
        <member name="T:Codon.UIModel.Input.UICommand`1">
            <summary>
            A command that includes various auxiliary properties
            such as <c>Text</c> and <c>Visibility</c>, 
            and that uses delegates to perform its action 
            and determine if its action can be performed. 
            </summary>
            <typeparam name="TParameter">The parameter type,
            which may be used when executing the command,
            evaluating if the command can execute,
            and evaluting the various properties.</typeparam>
        </member>
        <member name="M:Codon.UIModel.Input.UICommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.String,System.Int32)">
            <summary>
            Creates a synchronous UI command. 
            </summary>
            <param name="executeAction">
            The action to invoke when the command is executed.</param>
            <param name="canExecuteFunc">
            A func that determines if the command 
            may be performed. Can be <c>null</c>.</param>
            <param name="filePath">
            The path to the file that is instantiating this class. 
            This should only be explicitly specified 
            by classes that subclass this class.</param>
            <param name="lineNumber">
            The line number of the file that is instantiating this class. 
            This should only be explicitly specified 
            by classes that subclass this class.</param>
        </member>
        <member name="P:Codon.UIModel.Input.UICommand`1.Text">
            <summary>
            The title of this command that may be displayed to the user.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.UICommand`1.TextFunc">
            <summary>
            A func to retrieve the text of the command.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.UICommand`1.IconUrlFunc">
            <summary>
            A func to retrieve the icon URL of the command.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.UICommand`1.IconFontFunc">
            <summary>
            A func to retrieve the icon URL of the command.
            </summary>
        </member>
        <member name="T:Codon.UIModel.Input.UICompositeCommand">
            <summary>
            This class allows you to activate a command
            from a list of commands. When a command is selected
            all calls to properties of the composite command
            are passed through to the selected command.
            This class is particularly useful when you wish 
            to bind multiple commands to a single button for example,
            and switch its text, icon, and behaviour dynamically.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.UICompositeCommand.Commands">
            <summary>
            Gets the readonly list of commands.
            </summary>
        </member>
        <member name="M:Codon.UIModel.Input.UICompositeCommand.SetCommandParameter(Codon.UIModel.Input.IUICommand,System.Object)">
            <summary>
            Add a command to the list of commands.
            </summary>
            <param name="command">The command to add.</param>
            <param name="parameter">An object that is passed
            to the command upon execution and during
            property value evaluation.</param>
        </member>
        <member name="P:Codon.UIModel.Input.UICompositeCommand.SelectedCommand">
            <summary>
            Retrieves the selected command from the list of commands.
            Calls to <see cref="T:Codon.UIModel.Input.IUICommand"/> properties
            are passed through to the selected command,
            as are calls to execute and so forth.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.UICompositeCommand.SelectedCommandIndex">
            <summary>
            Retrieves the selected command's index
            from the list of commands.
            Calls to <see cref="T:Codon.UIModel.Input.IUICommand"/> properties
            are passed through to the selected command,
            as are calls to execute and so forth.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.UICompositeCommand.VisibleFallback">
            <summary>
            If there is no selected command, this value 
            determines the visibility of the composite command.
            </summary>
        </member>
        <member name="T:Codon.UIModel.Input.ICommandBase">
            <summary>
            The base code contract for a command.
            </summary>
        </member>
        <member name="M:Codon.UIModel.Input.ICommandBase.RaiseCanExecuteChanged">
            <summary>
            Raises the <c>CanExecuteChanged</c> event of the
            command. This causes subscribers to requery
            the status of the command using the <c>CanExecute</c>
            method.
            </summary>
        </member>
        <member name="M:Codon.UIModel.Input.ICommandBase.Refresh(System.Object)">
            <summary>
            Refresh the command state using the specified
            command parameter.
            </summary>
            <param name="commandParameter">
            Auxiliary information used by the command.</param>
        </member>
        <member name="T:Codon.UIModel.Input.IUICommand">
            <summary>
            Extends <c>ICommand</c> to provide display 
            centric properties such as text and visibility.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.IUICommand.Text">
            <summary>
            Gets the title text of the command.
            This may, for example, be displayed 
            as the text on a button.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.IUICommand.Visible">
            <summary>
            Gets whether the UI component
            should be visible.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.IUICommand.Enabled">
            <summary>
            Gets whether the UI component
            should be enabled.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.IUICommand.IconUrl">
            <summary>
            Gets the location of an icon resource.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.IUICommand.IconCharacter">
            <summary>
            Gets the icon character.
            This is usually a character within an icon font face.
            <seealso cref="P:Codon.UIModel.Input.IUICommand.IconFont"/>
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.IUICommand.IconFont">
            <summary>
            Gets the resource name of the font used to display
            the <see cref="P:Codon.UIModel.Input.IUICommand.IconCharacter"/>.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.IUICommand.IsChecked">
            <summary>
            When this command is associated with a checkbox
            this property retrieves whether the checkbox
            should be in its checked state.
            </summary>
        </member>
        <member name="P:Codon.UIModel.Input.IUICommand.Id">
            <summary>
            An arbitrary identifier that you can use to identify 
            commands in your application during execution. 
            </summary>
        </member>
        <member name="T:Codon.UIModel.IViewModel">
            <summary>
            The basic code contract for view-model.
            </summary>
        </member>
        <member name="M:Codon.UIModel.IViewModel.CleanUp">
            <summary>
            Performs any activities required to disconnect
            itself from the framework infrastructure, 
            such as unsubscribing from the <c>IMessenger</c>.
            </summary>
        </member>
        <member name="T:Codon.UIModel.ViewModelBase">
            <summary>
            A simple base implementation of an <see cref="T:Codon.UIModel.IViewModel"/>.
            </summary>
        </member>
        <member name="M:Codon.UIModel.ViewModelBase.InvokeIfRequired(System.Action)">
            <summary>
            Invokes the specified action on the UI thread. 
            If this call is made from the UI thread, 
            the action is performed synchronously.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Codon.UIModel.ViewModelBase.BeginInvoke(System.Action)">
            <summary>
            Executes the specified action without blocking. 
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Codon.UIModel.ViewModelBase.CleanUp">
            <summary>
            Performs any activities required to disconnect
            itself from the framework infrastructure, 
            such as unsubscribing from the <c>IMessenger</c>.
            </summary>
        </member>
    </members>
</doc>
